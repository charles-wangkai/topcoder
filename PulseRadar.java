import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class PulseRadar {
  int solutionCount;
  int[] solution;

  public int[] deduceSpeeds(int[] x1, int[] y1, int[] x2, int[] y2, int[] x3, int[] y3) {
    int n = x1.length;

    int[] secondIndices = IntStream.range(0, n).toArray();
    Set<Point> thirdPoints =
        IntStream.range(0, n).mapToObj(i -> new Point(x3[i], y3[i])).collect(Collectors.toSet());

    solutionCount = 0;
    search(x1, y1, x2, y2, thirdPoints, secondIndices, new HashSet<>(), 0);

    if (solutionCount != 1) {
      return new int[0];
    }

    return IntStream.range(0, n)
        .map(i -> computeSpeed(x1[i] - x2[solution[i]], y1[i] - y2[solution[i]]))
        .toArray();
  }

  void search(
      int[] x1,
      int[] y1,
      int[] x2,
      int[] y2,
      Set<Point> thirdPoints,
      int[] secondIndices,
      Set<Point> currentThirds,
      int depth) {
    int n = x1.length;

    if (depth == n) {
      ++solutionCount;
      solution = secondIndices.clone();

      return;
    }

    for (int i = depth; i < n; ++i) {
      Point third =
          new Point(x2[secondIndices[i]] * 2 - x1[depth], y2[secondIndices[i]] * 2 - y1[depth]);

      if (thirdPoints.contains(third) && !currentThirds.contains(third)) {
        swap(secondIndices, i, depth);
        currentThirds.add(third);

        search(x1, y1, x2, y2, thirdPoints, secondIndices, currentThirds, depth + 1);

        swap(secondIndices, i, depth);
        currentThirds.remove(third);
      }
    }
  }

  void swap(int[] a, int index1, int index2) {
    int temp = a[index1];
    a[index1] = a[index2];
    a[index2] = temp;
  }

  int computeSpeed(int dx, int dy) {
    return (int) Math.round(Math.sqrt(dx * dx + dy * dy));
  }

  class Point {
    int x;
    int y;

    Point(int x, int y) {
      this.x = x;
      this.y = y;
    }

    @Override
    public int hashCode() {
      return Objects.hash(x, y);
    }

    @Override
    public boolean equals(Object obj) {
      Point other = (Point) obj;

      return x == other.x && y == other.y;
    }
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum,
      int[] p0,
      int[] p1,
      int[] p2,
      int[] p3,
      int[] p4,
      int[] p5,
      boolean hasAnswer,
      int[] p6) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p0[i]);
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p1.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p1[i]);
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p2.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p2[i]);
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p3.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p3[i]);
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p4.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p4[i]);
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p5.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p5[i]);
    }
    System.out.print("}");
    System.out.println("]");
    PulseRadar obj;
    int[] answer;
    obj = new PulseRadar();
    long startTime = System.currentTimeMillis();
    answer = obj.deduceSpeeds(p0, p1, p2, p3, p4, p5);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.print("\t" + "{");
      for (int i = 0; p6.length > i; ++i) {
        if (i > 0) {
          System.out.print(",");
        }
        System.out.print(p6[i]);
      }
      System.out.println("}");
    }
    System.out.println("Your answer:");
    System.out.print("\t" + "{");
    for (int i = 0; answer.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(answer[i]);
    }
    System.out.println("}");
    if (hasAnswer) {
      if (answer.length != p6.length) {
        res = false;
      } else {
        for (int i = 0; answer.length > i; ++i) {
          if (answer[i] != p6[i]) {
            res = false;
          }
        }
      }
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int[] p0;
    int[] p1;
    int[] p2;
    int[] p3;
    int[] p4;
    int[] p5;
    int[] p6;

    // ----- test 0 -----
    p0 = new int[] {-8, -7, 9, -5};
    p1 = new int[] {2, -1, -2, -6};
    p2 = new int[] {-2, -3, 8, 1};
    p3 = new int[] {-3, 1, 4, -2};
    p4 = new int[] {4, 1, 7, 7};
    p5 = new int[] {-8, 3, 10, 2};
    p6 = new int[] {8, 4, 6, 7};
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = new int[] {-7, -2, 2, 0};
    p1 = new int[] {8, -2, -2, -6};
    p2 = new int[] {-5, -1, 3, -1};
    p3 = new int[] {9, 1, -4, -8};
    p4 = new int[] {-3, 1, 5, -2};
    p5 = new int[] {10, 5, -6, -10};
    p6 = new int[] {};
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = new int[] {-4, -4, -4, -4};
    p1 = new int[] {9, 3, -1, -7};
    p2 = new int[] {-1, -1, -1, -1};
    p3 = new int[] {6, -2, 4, -4};
    p4 = new int[] {2, 2, 2, 2};
    p5 = new int[] {3, -7, 9, -1};
    p6 = new int[] {};
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = new int[] {5, -4, 2, -1, 8, -4, -8, 3, -3, -4};
    p1 = new int[] {9, 9, -2, -8, 3, -8, -4, 2, -4, -2};
    p2 = new int[] {-2, 2, 1, 2, 1, -1, -3, 1, -4, -1};
    p3 = new int[] {-1, -5, 6, -2, 2, 2, 0, -1, -2, -5};
    p4 = new int[] {8, 5, -1, -3, 6, -5, 2, 0, -6, -8};
    p5 = new int[] {4, -2, 2, 3, -5, 2, -8, 0, -5, 2};
    p6 = new int[] {5, 9, 5, 4, 8, 8, 4, 4, 3, 4};
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = new int[] {-300, 466};
    p1 = new int[] {-600, 866};
    p2 = new int[] {466, 100};
    p3 = new int[] {866, -450};
    p4 = new int[] {500, 466};
    p5 = new int[] {-300, 866};
    p6 = new int[] {427, 0};
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
