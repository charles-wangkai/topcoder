import java.util.Arrays;

public class PointInPolygon {
	public String testPoint(String[] vertices, int testPointX, int testPointY) {
		Point[] points = Arrays.stream(vertices).map(Point::new).toArray(Point[]::new);

		int intersectCount = 0;
		for (int i = 0; i < vertices.length; ++i) {
			Point a = points[i];
			Point b = points[(i + 1) % points.length];

			if (isOnSegment(a, b, testPointX, testPointY)) {
				return "BOUNDARY";
			}

			if (a.x == b.x && testPointY >= Math.min(a.y, b.y) && testPointY < Math.max(a.y, b.y) && testPointX < a.x) {
				++intersectCount;
			}
		}

		return (intersectCount % 2 == 0) ? "EXTERIOR" : "INTERIOR";
	}

	boolean isOnSegment(Point a, Point b, int testPointX, int testPointY) {
		if (a.x == b.x) {
			return testPointX == a.x && testPointY >= Math.min(a.y, b.y) && testPointY <= Math.max(a.y, b.y);
		} else {
			return testPointY == a.y && testPointX >= Math.min(a.x, b.x) && testPointX <= Math.max(a.x, b.x);
		}
	}

	class Point {
		int x;
		int y;

		Point(String s) {
			String[] parts = s.split(" ");
			x = Integer.parseInt(parts[0]);
			y = Integer.parseInt(parts[1]);
		}
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, int p2, boolean hasAnswer, String p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + p1 + "," + p2);
		System.out.println("]");
		PointInPolygon obj;
		String answer;
		obj = new PointInPolygon();
		long startTime = System.currentTimeMillis();
		answer = obj.testPoint(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p3 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p3);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		String[] p0;
		int p1;
		int p2;
		String p3;

		// ----- test 0 -----
		p0 = new String[] { "0 0", "0 10", "10 10", "10 0" };
		p1 = 5;
		p2 = 5;
		p3 = "INTERIOR";
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new String[] { "0 0", "0 10", "10 10", "10 0" };
		p1 = 10;
		p2 = 15;
		p3 = "EXTERIOR";
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new String[] { "0 0", "0 10", "10 10", "10 0" };
		p1 = 5;
		p2 = 10;
		p3 = "BOUNDARY";
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new String[] { "-100 -90", "-100 100", "100 100", "100 -100", "-120 -100", "-120 100", "-130 100",
				"-130 -110", "110 -110", "110 110", "-110 110", "-110 -90" };
		p1 = 0;
		p2 = 0;
		p3 = "EXTERIOR";
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = new String[] { "0 0", "0 1000", "1000 1000", "1000 800", "200 800", "200 600", "600 600", "600 400",
				"200 400", "200 200", "1000 200", "1000 0" };
		p1 = 100;
		p2 = 500;
		p3 = "INTERIOR";
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 5 -----
		p0 = new String[] { "0 1000", "1000 1000", "1000 800", "200 800", "200 600", "600 600", "600 400", "200 400",
				"200 200", "1000 200", "1000 0", "0 0" };
		p1 = 322;
		p2 = 333;
		p3 = "EXTERIOR";
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 6 -----
		p0 = new String[] { "500 0", "500 100", "400 100", "400 200", "300 200", "300 300", "200 300", "200 400",
				"100 400", "100 500", "0 500", "0 400", "-100 400", "-100 300", "-200 300", "-200 200", "-300 200",
				"-300 100", "-400 100", "-400 0", "-500 0", "-500 -100", "-400 -100", "-400 -200", "-300 -200",
				"-300 -300", "-200 -300", "-200 -400", "-100 -400", "-100 -500", "0 -500", "0 -400", "100 -400",
				"100 -300", "200 -300", "200 -200", "300 -200", "300 -100", "400 -100", "400 0" };
		p1 = 200;
		p2 = 200;
		p3 = "INTERIOR";
		all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 7 -----
		p0 = new String[] { "1 0", "2 0", "2 1", "3 1", "3 0", "4 0", "4 -1", "5 -1", "5 0", "6 0", "6 2", "0 2", "0 3",
				"-1 3", "-1 4", "0 4", "0 6", "1 6", "1 7", "0 7", "0 8", "-2 8", "-2 2", "-8 2", "-8 0", "-7 0",
				"-7 -1", "-6 -1", "-6 0", "-4 0", "-4 1", "-3 1", "-3 0", "-2 0", "-2 -6", "0 -6", "0 -5", "1 -5",
				"1 -4", "0 -4", "0 -3", "-1 -3", "-1 -2", "0 -2", "0 -1", "1 -1" };
		p1 = 0;
		p2 = 0;
		p3 = "INTERIOR";
		all_right = KawigiEdit_RunTest(7, p0, p1, p2, true, p3) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
