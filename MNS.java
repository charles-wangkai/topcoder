import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

public class MNS {
  public int combos(int[] numbers) {
    Set<String> solutions = new HashSet<>();
    search(solutions, numbers, 0);

    return solutions.size();
  }

  void search(Set<String> solutions, int[] numbers, int index) {
    if (index == numbers.length) {
      int sum = numbers[0] + numbers[1] + numbers[2];
      if (numbers[3] + numbers[4] + numbers[5] == sum
          && numbers[6] + numbers[7] + numbers[8] == sum
          && numbers[0] + numbers[3] + numbers[6] == sum
          && numbers[1] + numbers[4] + numbers[7] == sum
          && numbers[2] + numbers[5] + numbers[8] == sum) {
        solutions.add(
            Arrays.stream(numbers).mapToObj(String::valueOf).collect(Collectors.joining()));
      }

      return;
    }

    for (int i = index; i < numbers.length; ++i) {
      swap(numbers, i, index);
      search(solutions, numbers, index + 1);
      swap(numbers, i, index);
    }
  }

  void swap(int[] a, int index1, int index2) {
    int temp = a[index1];
    a[index1] = a[index2];
    a[index2] = temp;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p0[i]);
    }
    System.out.print("}");
    System.out.println("]");
    MNS obj;
    int answer;
    obj = new MNS();
    long startTime = System.currentTimeMillis();
    answer = obj.combos(p0);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p1);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p1;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int[] p0;
    int p1;

    // ----- test 0 -----
    p0 = new int[] {1, 2, 3, 3, 2, 1, 2, 2, 2};
    p1 = 18;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = new int[] {4, 4, 4, 4, 4, 4, 4, 4, 4};
    p1 = 1;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = new int[] {1, 5, 1, 2, 5, 6, 2, 3, 2};
    p1 = 36;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = new int[] {1, 2, 6, 6, 6, 4, 2, 6, 4};
    p1 = 0;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
