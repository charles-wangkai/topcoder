import java.util.stream.IntStream;

public class ComplexIntegers {
  public String[] classify(int[] realPart, int[] imaginaryPart) {
    return IntStream.range(0, realPart.length)
        .mapToObj(i -> classifyOne(realPart[i], imaginaryPart[i]))
        .toArray(String[]::new);
  }

  String classifyOne(int real, int imag) {
    int norm = real * real + imag * imag;
    if (norm == 0) {
      return "zero";
    }
    if (norm == 1) {
      return "unit";
    }

    return ((real == 0 && Math.abs(imag) % 4 == 3 && isPrime(Math.abs(imag)))
            || (imag == 0 && Math.abs(real) % 4 == 3 && isPrime(Math.abs(real)))
            || (real != 0 && imag != 0 && isPrime(norm)))
        ? "prime"
        : "composite";
  }

  boolean isPrime(int n) {
    if (n <= 1) {
      return false;
    }

    for (int i = 2; i * i <= n; ++i) {
      if (n % i == 0) {
        return false;
      }
    }

    return true;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, int[] p0, int[] p1, boolean hasAnswer, String[] p2) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p0[i]);
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p1.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p1[i]);
    }
    System.out.print("}");
    System.out.println("]");
    ComplexIntegers obj;
    String[] answer;
    obj = new ComplexIntegers();
    long startTime = System.currentTimeMillis();
    answer = obj.classify(p0, p1);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.print("\t" + "{");
      for (int i = 0; p2.length > i; ++i) {
        if (i > 0) {
          System.out.print(",");
        }
        System.out.print("\"" + p2[i] + "\"");
      }
      System.out.println("}");
    }
    System.out.println("Your answer:");
    System.out.print("\t" + "{");
    for (int i = 0; answer.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print("\"" + answer[i] + "\"");
    }
    System.out.println("}");
    if (hasAnswer) {
      if (answer.length != p2.length) {
        res = false;
      } else {
        for (int i = 0; answer.length > i; ++i) {
          if (!answer[i].equals(p2[i])) {
            res = false;
          }
        }
      }
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int[] p0;
    int[] p1;
    String[] p2;

    // ----- test 0 -----
    p0 = new int[] {0, 1, 0, 1, -1, 2, 0, 0, -3};
    p1 = new int[] {0, 0, -1, 1, 1, 0, -3, 5, -2};
    p2 =
        new String[] {
          "zero", "unit", "unit", "prime", "prime", "composite", "prime", "composite", "prime"
        };
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = new int[] {2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5};
    p1 = new int[] {2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5};
    p2 =
        new String[] {
          "composite",
          "prime",
          "composite",
          "prime",
          "prime",
          "composite",
          "composite",
          "composite",
          "composite",
          "composite",
          "composite",
          "prime",
          "prime",
          "composite",
          "prime",
          "composite"
        };
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, -19, 23, 29, 31, 37, -41};
    p1 = new int[] {15, 2, -3, 5, -7, 11, -13, 17, 0, 0, 0, 0, 0, 0, 0};
    p2 =
        new String[] {
          "composite",
          "composite",
          "prime",
          "composite",
          "prime",
          "prime",
          "composite",
          "composite",
          "zero",
          "prime",
          "prime",
          "composite",
          "prime",
          "composite",
          "composite"
        };
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = new int[] {99, -39, 0, 0, 97, 1003, 9998, 1119};
    p1 = new int[] {0, 0, 35, -129, -2, -232, 9997, 1120};
    p2 =
        new String[] {
          "composite", "composite", "composite", "composite", "prime", "prime", "prime", "prime"
        };
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 =
        new int[] {
          0, 0, 0, 1, -1, 1, 1, -1, -1, 2, -2, 0, 0, 1, 1, 2, 2, -1, -1, -2, -2, 3, -3, 0, 0, 1, 1,
          3, 3, -1, -1, -3, -3, 2, 2, -2, -2, 0, 0, 4, -4, 1, 1, 4, 4, -1, -1, -4, -4
        };
    p1 =
        new int[] {
          0, 1, -1, 0, 0, 1, -1, 1, -1, 0, 0, 2, -2, 2, -2, 1, -1, 2, -2, 1, -1, 0, 0, -3, 3, 3, -3,
          1, -1, 3, -3, 1, -1, 2, -2, 2, -2, 4, -4, 0, 0, 4, -4, 1, -1, 4, -4, 1, -1
        };
    p2 =
        new String[] {
          "zero",
          "unit",
          "unit",
          "unit",
          "unit",
          "prime",
          "prime",
          "prime",
          "prime",
          "composite",
          "composite",
          "composite",
          "composite",
          "prime",
          "prime",
          "prime",
          "prime",
          "prime",
          "prime",
          "prime",
          "prime",
          "prime",
          "prime",
          "prime",
          "prime",
          "composite",
          "composite",
          "composite",
          "composite",
          "composite",
          "composite",
          "composite",
          "composite",
          "composite",
          "composite",
          "composite",
          "composite",
          "composite",
          "composite",
          "composite",
          "composite",
          "prime",
          "prime",
          "prime",
          "prime",
          "prime",
          "prime",
          "prime",
          "prime"
        };
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
