public class Intersect {
  public int area(int[] x, int[] y) {
    int minX = Integer.MIN_VALUE;
    int maxX = Integer.MAX_VALUE;
    int minY = Integer.MIN_VALUE;
    int maxY = Integer.MAX_VALUE;
    for (int i = 0; i < x.length; i += 2) {
      minX = Math.max(minX, Math.min(x[i], x[i + 1]));
      maxX = Math.min(maxX, Math.max(x[i], x[i + 1]));
      minY = Math.max(minY, Math.min(y[i], y[i + 1]));
      maxY = Math.min(maxY, Math.max(y[i], y[i + 1]));
    }

    return Math.max(0, maxX - minX) * Math.max(0, maxY - minY);
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p0[i]);
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p1.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p1[i]);
    }
    System.out.print("}");
    System.out.println("]");
    Intersect obj;
    int answer;
    obj = new Intersect();
    long startTime = System.currentTimeMillis();
    answer = obj.area(p0, p1);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p2);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p2;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int[] p0;
    int[] p1;
    int p2;

    // ----- test 0 -----
    p0 = new int[] {0, 2, 3, -4};
    p1 = new int[] {17, 1000, 18, 6};
    p2 = 2;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = new int[] {10000, -10000};
    p1 = new int[] {-10000, 10000};
    p2 = 400000000;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = new int[] {3, 8, 6, 12, 10, 15};
    p1 = new int[] {7, 17, 7, 17, 7, 17};
    p2 = 0;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = new int[] {0, 0, 0, 0, 0, 0, 0, 0};
    p1 = new int[] {5, 5, 5, 5, 5, 5, 5, 5};
    p2 = 0;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = new int[] {2, 100, 5, 32, 1000, -20, 47, 12};
    p1 = new int[] {29, -1000, -800, -200, -900, 300, -600, -650};
    p2 = 1000;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 5 -----
    p0 = new int[] {1, 7, 12, 3, 16, 8, 3, 12};
    p1 = new int[] {-90, -60, -70, 3, -60, -90, -80, -100};
    p2 = 0;
    all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
