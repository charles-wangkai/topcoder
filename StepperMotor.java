import java.util.Arrays;
import java.util.Comparator;

public class StepperMotor {
  public int rotateToNearest(int n, int current, int[] target) {
    return Arrays.stream(target)
        .map(x -> computeDiff(n, current, x))
        .boxed()
        .min(
            Comparator.comparing((Integer diff) -> Math.abs(diff))
                .thenComparing(Comparator.comparing(Integer::signum).reversed()))
        .get();
  }

  int computeDiff(int n, int current, int to) {
    int posDiff = Math.floorMod((long) to - current, n);
    int negDiff = posDiff - n;

    return (posDiff <= -negDiff) ? posDiff : negDiff;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, int p0, int p1, int[] p2, boolean hasAnswer, int p3) {
    System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + "{");
    for (int i = 0; p2.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p2[i]);
    }
    System.out.print("}");
    System.out.println("]");
    StepperMotor obj;
    int answer;
    obj = new StepperMotor();
    long startTime = System.currentTimeMillis();
    answer = obj.rotateToNearest(p0, p1, p2);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p3);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p3;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int p0;
    int p1;
    int[] p2;
    int p3;

    // ----- test 0 -----
    p0 = 10;
    p1 = 0;
    p2 = new int[] {-2, -3, 4, 5, 6, 9999999};
    p3 = -1;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = 2;
    p1 = 314159;
    p2 = new int[] {10, 8, 6, 4, 2};
    p3 = 1;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = 1;
    p1 = -2147483648;
    p2 = new int[] {-2147483648, -2147483648, 2147483647, 2147483647};
    p3 = 0;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = 23;
    p1 = 10;
    p2 =
        new int[] {
          64077, -567273, 105845, -279980, 35557, -286190, -652879, -431665, -634870, -454044
        };
    p3 = -11;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = 1000000000;
    p1 = 1403466951;
    p2 =
        new int[] {
          1233321992,
          11423750,
          1356595134,
          1130863021,
          1183514764,
          1943494859,
          1714480374,
          1529875954,
          1738756510,
          1190153525
        };
    p3 = -46871817;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 5 -----
    p0 = 1285491931;
    p1 = -311643833;
    p2 = new int[] {-2079782327, 817817397, 445810906};
    p3 = -156030701;
    all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
