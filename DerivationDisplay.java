import java.util.ArrayList;
import java.util.List;

public class DerivationDisplay {
  public String[] getDerivation(String input) {
    List<String> derivation = new ArrayList<>();
    search(derivation, 'S', input, "S");

    return derivation.toArray(String[]::new);
  }

  void search(List<String> derivation, char symbol, String target, String current) {
    derivation.add(current);

    if (symbol == 'S') {
      if (target.startsWith("b") && target.endsWith("a")) {
        search(
            derivation, 'U', target.substring(1, target.length() - 1), current.replace("S", "bUa"));
      } else {
        search(derivation, 'T', target, current.replace("S", "T"));
      }
    } else if (symbol == 'T') {
      if (target.startsWith("a") && target.endsWith("b")) {
        search(
            derivation, 'T', target.substring(1, target.length() - 1), current.replace("T", "aTb"));
      } else if (target.startsWith("a")) {
        search(derivation, 'A', target, current.replace("T", "A"));
      } else {
        search(derivation, 'B', target, current.replace("T", "B"));
      }
    } else if (symbol == 'U') {
      if (target.equals("a")) {
        search(derivation, (char) 0, null, current.replace("U", "a"));
      } else if (target.equals("b")) {
        search(derivation, (char) 0, null, current.replace("U", "b"));
      } else if (target.startsWith("a")) {
        search(derivation, 'U', target.substring(1), current.replace("U", "aU"));
      } else {
        search(derivation, 'U', target.substring(1), current.replace("U", "bU"));
      }
    } else if (symbol == 'A') {
      if (target.equals("a")) {
        search(derivation, (char) 0, null, current.replace("A", "a"));
      } else {
        search(derivation, 'A', target.substring(1), current.replace("A", "aA"));
      }
    } else if (symbol == 'B') {
      if (target.equals("b")) {
        search(derivation, (char) 0, null, current.replace("B", "b"));
      } else {
        search(derivation, 'B', target.substring(1), current.replace("B", "bB"));
      }
    }
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, String p0, boolean hasAnswer, String[] p1) {
    System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
    System.out.println("]");
    DerivationDisplay obj;
    String[] answer;
    obj = new DerivationDisplay();
    long startTime = System.currentTimeMillis();
    answer = obj.getDerivation(p0);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.print("\t" + "{");
      for (int i = 0; p1.length > i; ++i) {
        if (i > 0) {
          System.out.print(",");
        }
        System.out.print("\"" + p1[i] + "\"");
      }
      System.out.println("}");
    }
    System.out.println("Your answer:");
    System.out.print("\t" + "{");
    for (int i = 0; answer.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print("\"" + answer[i] + "\"");
    }
    System.out.println("}");
    if (hasAnswer) {
      if (answer.length != p1.length) {
        res = false;
      } else {
        for (int i = 0; answer.length > i; ++i) {
          if (!answer[i].equals(p1[i])) {
            res = false;
          }
        }
      }
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    String p0;
    String[] p1;

    // ----- test 0 -----
    p0 = "aaabb";
    p1 = new String[] {"S", "T", "aTb", "aaTbb", "aaAbb", "aaabb"};
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = "bbba";
    p1 = new String[] {"S", "bUa", "bbUa", "bbba"};
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = "baabba";
    p1 = new String[] {"S", "bUa", "baUa", "baaUa", "baabUa", "baabba"};
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = "a";
    p1 = new String[] {"S", "T", "A", "a"};
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = "b";
    p1 = new String[] {"S", "T", "B", "b"};
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------

    // ----- test 5 -----
    p0 = "aabbbbbbbb";
    p1 =
        new String[] {
          "S",
          "T",
          "aTb",
          "aaTbb",
          "aaBbb",
          "aabBbb",
          "aabbBbb",
          "aabbbBbb",
          "aabbbbBbb",
          "aabbbbbBbb",
          "aabbbbbbbb"
        };
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
