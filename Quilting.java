import java.util.HashMap;
import java.util.Map;

public class Quilting {
  static final int[] R_OFFSETS = {-1, 0, 1, 0};
  static final int[] C_OFFSETS = {0, -1, 0, 1};

  public String lastPatch(int length, int width, String[] colorList) {
    String[][] colors = new String[length][width];
    Map<String, Integer> colorToCount = new HashMap<>();
    String prevColor = null;
    int r = length / 2;
    int c = width / 2;
    int direction = 0;
    int step = 0;
    int size = 1;
    for (int i = 0; i < length * width; ++i) {
      String color = chooseColor(colors, colorToCount, colorList, r, c);
      colors[r][c] = color;
      colorToCount.put(color, colorToCount.getOrDefault(color, 0) + 1);
      prevColor = color;

      r += R_OFFSETS[direction];
      c += C_OFFSETS[direction];
      ++step;
      if (step == size) {
        step = 0;
        direction = (direction + 1) % R_OFFSETS.length;

        if (direction % 2 == 0) {
          ++size;
        }
      }
    }

    return prevColor;
  }

  String chooseColor(
      String[][] colors, Map<String, Integer> colorToCount, String[] colorList, int r, int c) {
    int row = colors.length;
    int col = colors[0].length;

    int bestAdjNum = Integer.MAX_VALUE;
    String result = null;
    for (String color : colorList) {
      int adjNum = 0;
      for (int dr = -1; dr <= 1; ++dr) {
        for (int dc = -1; dc <= 1; ++dc) {
          int adjR = r + dr;
          int adjC = c + dc;

          if (adjR >= 0 && adjR < row && adjC >= 0 && adjC < col && colors[adjR][adjC] == color) {
            ++adjNum;
          }
        }
      }

      if (adjNum < bestAdjNum
          || (adjNum == bestAdjNum
              && colorToCount.getOrDefault(color, 0) < colorToCount.getOrDefault(result, 0))) {
        bestAdjNum = adjNum;
        result = color;
      }
    }

    return result;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, int p0, int p1, String[] p2, boolean hasAnswer, String p3) {
    System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + "{");
    for (int i = 0; p2.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print("\"" + p2[i] + "\"");
    }
    System.out.print("}");
    System.out.println("]");
    Quilting obj;
    String answer;
    obj = new Quilting();
    long startTime = System.currentTimeMillis();
    answer = obj.lastPatch(p0, p1, p2);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + "\"" + p3 + "\"");
    }
    System.out.println("Your answer:");
    System.out.println("\t" + "\"" + answer + "\"");
    if (hasAnswer) {
      res = answer.equals(p3);
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int p0;
    int p1;
    String[] p2;
    String p3;

    // ----- test 0 -----
    p0 = 3;
    p1 = 2;
    p2 = new String[] {"RED", "BLUE", "TAN"};
    p3 = "TAN";
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = 4;
    p1 = 3;
    p2 = new String[] {"E", "D", "C", "B", "A"};
    p3 = "E";
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = 3;
    p1 = 3;
    p2 = new String[] {"A", "B", "C", "D"};
    p3 = "C";
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = 1;
    p1 = 1;
    p2 = new String[] {"RED", "BLUE", "YELLOW"};
    p3 = "RED";
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = 10;
    p1 = 10;
    p2 = new String[] {"X", "Y", "Z"};
    p3 = "Z";
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
