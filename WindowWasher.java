import java.util.Arrays;

public class WindowWasher {
  public int fastest(int width, int height, int[] washTimes) {
    int lower = 0;
    int upper = width * height * Arrays.stream(washTimes).max().getAsInt();
    int result = -1;
    while (lower <= upper) {
      int middle = (lower + upper) / 2;
      if (check(width, height, washTimes, middle)) {
        result = middle;
        upper = middle - 1;
      } else {
        lower = middle + 1;
      }
    }

    return result;
  }

  boolean check(int width, int height, int[] washTimes, int timeLimit) {
    return Arrays.stream(washTimes).map(washTime -> timeLimit / (washTime * height)).sum() >= width;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, int p0, int p1, int[] p2, boolean hasAnswer, int p3) {
    System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + "{");
    for (int i = 0; p2.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p2[i]);
    }
    System.out.print("}");
    System.out.println("]");
    WindowWasher obj;
    int answer;
    obj = new WindowWasher();
    long startTime = System.currentTimeMillis();
    answer = obj.fastest(p0, p1, p2);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p3);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p3;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int p0;
    int p1;
    int[] p2;
    int p3;

    // ----- test 0 -----
    p0 = 10;
    p1 = 10;
    p2 = new int[] {60};
    p3 = 6000;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = 10;
    p1 = 10;
    p2 = new int[] {60, 60};
    p3 = 3000;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = 10;
    p1 = 10;
    p2 = new int[] {60, 30};
    p3 = 2100;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = 1000;
    p1 = 1000;
    p2 = new int[] {1000};
    p3 = 1000000000;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = 421;
    p1 = 936;
    p2 = new int[] {111, 56, 931, 22, 445, 90, 14, 222};
    p3 = 2450448;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 5 -----
    p0 = 25;
    p1 = 25;
    p2 = new int[] {1, 625};
    p3 = 625;
    all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 6 -----
    p0 = 12;
    p1 = 754;
    p2 = new int[] {728, 734, 147, 464, 6, 703, 254};
    p3 = 54288;
    all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
