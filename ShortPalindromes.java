public class ShortPalindromes {
  public String shortest(String base) {
    int length = base.length();
    String[][] palindromes = new String[length + 1][length + 1];
    for (int l = 1; l <= length; ++l) {
      for (int beginIndex = 0; beginIndex + l <= length; ++beginIndex) {
        int endIndex = beginIndex + l - 1;
        char beginCh = base.charAt(beginIndex);
        char endCh = base.charAt(endIndex);
        if (l == 1) {
          palindromes[beginIndex][endIndex] = String.valueOf(beginCh);
        } else if (beginCh == endCh) {
          palindromes[beginIndex][endIndex] =
              String.format(
                  "%c%s%c",
                  beginCh, (l == 2) ? "" : palindromes[beginIndex + 1][endIndex - 1], endCh);
        } else {
          palindromes[beginIndex][endIndex] =
              computeMinStr(
                  String.format("%c%s%c", endCh, palindromes[beginIndex][endIndex - 1], endCh),
                  String.format("%c%s%c", beginCh, palindromes[beginIndex + 1][endIndex], beginCh));
        }
      }
    }

    return palindromes[0][length - 1];
  }

  String computeMinStr(String s1, String s2) {
    if (s1.length() != s2.length()) {
      return (s1.length() < s2.length()) ? s1 : s2;
    }

    return (s1.compareTo(s2) <= 0) ? s1 : s2;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String p1) {
    System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
    System.out.println("]");
    ShortPalindromes obj;
    String answer;
    obj = new ShortPalindromes();
    long startTime = System.currentTimeMillis();
    answer = obj.shortest(p0);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + "\"" + p1 + "\"");
    }
    System.out.println("Your answer:");
    System.out.println("\t" + "\"" + answer + "\"");
    if (hasAnswer) {
      res = answer.equals(p1);
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    String p0;
    String p1;

    // ----- test 0 -----
    p0 = "RACE";
    p1 = "ECARACE";
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = "TOPCODER";
    p1 = "REDTOCPCOTDER";
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = "Q";
    p1 = "Q";
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = "MADAMIMADAM";
    p1 = "MADAMIMADAM";
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = "ALRCAGOEUAOEURGCOEUOOIGFA";
    p1 = "AFLRCAGIOEOUAEOCEGRURGECOEAUOEOIGACRLFA";
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
