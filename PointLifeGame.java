import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class PointLifeGame {
  static final double EPSILON = 1e-9;

  public String simulate(int[] xs, int[] ys, int rnds) {
    Set<Point> points =
        IntStream.range(0, xs.length)
            .mapToObj(i -> new Point(xs[i], ys[i]))
            .collect(Collectors.toSet());

    for (int i = 0; i < rnds; ++i) {
      Set<Point> nextPoints = new HashSet<>();
      for (Point p1 : points) {
        for (Point p2 : points) {
          if (!p1.equals(p2)) {
            nextPoints.add(new Point((p1.x + p2.x) / 2, (p1.y + p2.y) / 2));
          }
        }
      }

      points =
          nextPoints.stream()
              .sorted(
                  (p1, p2) ->
                      Math.abs(p1.y - p2.y) > EPSILON
                          ? -Double.compare(p1.y, p2.y)
                          : -Double.compare(p1.x, p2.x))
              .limit(rnds)
              .collect(Collectors.toSet());
    }

    Point best =
        points.stream()
            .max(
                (p1, p2) ->
                    Math.abs(p1.y - p2.y) > EPSILON
                        ? Double.compare(p1.y, p2.y)
                        : Double.compare(p1.x, p2.x))
            .get();

    return String.format(
        "%09.4f %09.4f", Math.floor(best.x * 10000) / 10000, Math.floor(best.y * 10000) / 10000);
  }

  class Point {
    double x;
    double y;

    Point(double x, double y) {
      this.x = x;
      this.y = y;
    }

    @Override
    public int hashCode() {
      return Objects.hash(x, y);
    }

    @Override
    public boolean equals(Object obj) {
      Point other = (Point) obj;

      return Math.abs(x - other.x) < EPSILON && Math.abs(y - other.y) < EPSILON;
    }
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, int[] p0, int[] p1, int p2, boolean hasAnswer, String p3) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p0[i]);
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p1.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p1[i]);
    }
    System.out.print("}" + "," + p2);
    System.out.println("]");
    PointLifeGame obj;
    String answer;
    obj = new PointLifeGame();
    long startTime = System.currentTimeMillis();
    answer = obj.simulate(p0, p1, p2);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + "\"" + p3 + "\"");
    }
    System.out.println("Your answer:");
    System.out.println("\t" + "\"" + answer + "\"");
    if (hasAnswer) {
      res = answer.equals(p3);
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int[] p0;
    int[] p1;
    int p2;
    String p3;

    // ----- test 0 -----
    p0 = new int[] {0, 0, 10, 10};
    p1 = new int[] {0, 10, 0, 10};
    p2 = 1;
    p3 = "0005.0000 0010.0000";
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = new int[] {0, 0, 10, 10};
    p1 = new int[] {0, 10, 0, 10};
    p2 = 10;
    p3 = "0005.0097 0007.5000";
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = new int[] {0, 10, 20};
    p1 = new int[] {0, 10, 0};
    p2 = 1;
    p3 = "0015.0000 0005.0000";
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 =
        new int[] {
          1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9,
          10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
        };
    p1 =
        new int[] {
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
        };
    p2 = 10;
    p3 = "0009.0009 0005.0000";
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = new int[] {3, 3, 8, 0};
    p1 = new int[] {2, 1, 1, 3};
    p2 = 10;
    p3 = "0002.4658 0002.1875";
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
