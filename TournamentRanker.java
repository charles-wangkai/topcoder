import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class TournamentRanker {
  public String[] rankTeams(String[] names, String[] lostTo) {
    Map<String, String> nameToWinner =
        IntStream.range(0, names.length)
            .boxed()
            .collect(Collectors.toMap(i -> names[i], i -> lostTo[i]));

    Map<String, Integer> nameToWinCount =
        Arrays.stream(names).collect(Collectors.toMap(name -> name, name -> 0));
    for (String winner : lostTo) {
      if (!winner.isEmpty()) {
        nameToWinCount.put(winner, nameToWinCount.get(winner) + 1);
      }
    }

    @SuppressWarnings("unchecked")
    List<String>[] winCountToNames =
        new List[nameToWinCount.values().stream().mapToInt(Integer::intValue).max().getAsInt() + 1];
    for (int i = 0; i < winCountToNames.length; ++i) {
      winCountToNames[i] = new ArrayList<>();
    }
    for (String name : names) {
      winCountToNames[nameToWinCount.get(name)].add(name);
    }

    List<String> result = new ArrayList<>();
    Map<String, Integer> nameToRank = new HashMap<>();
    for (int i = winCountToNames.length - 1; i >= 0; --i) {
      Collections.sort(
          winCountToNames[i], Comparator.comparing(name -> nameToRank.get(nameToWinner.get(name))));

      for (String name : winCountToNames[i]) {
        nameToRank.put(name, result.size());
        result.add(name);
      }
    }

    return result.toArray(String[]::new);
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, String[] p0, String[] p1, boolean hasAnswer, String[] p2) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print("\"" + p0[i] + "\"");
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p1.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print("\"" + p1[i] + "\"");
    }
    System.out.print("}");
    System.out.println("]");
    TournamentRanker obj;
    String[] answer;
    obj = new TournamentRanker();
    long startTime = System.currentTimeMillis();
    answer = obj.rankTeams(p0, p1);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.print("\t" + "{");
      for (int i = 0; p2.length > i; ++i) {
        if (i > 0) {
          System.out.print(",");
        }
        System.out.print("\"" + p2[i] + "\"");
      }
      System.out.println("}");
    }
    System.out.println("Your answer:");
    System.out.print("\t" + "{");
    for (int i = 0; answer.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print("\"" + answer[i] + "\"");
    }
    System.out.println("}");
    if (hasAnswer) {
      if (answer.length != p2.length) {
        res = false;
      } else {
        for (int i = 0; answer.length > i; ++i) {
          if (!answer[i].equals(p2[i])) {
            res = false;
          }
        }
      }
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    String[] p0;
    String[] p1;
    String[] p2;

    // ----- test 0 -----
    p0 = new String[] {"RODDICK", "SCHUETTLER", "FERREIRA", "AGASSI"};
    p1 = new String[] {"SCHUETTLER", "AGASSI", "AGASSI", ""};
    p2 = new String[] {"AGASSI", "SCHUETTLER", "FERREIRA", "RODDICK"};
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 =
        new String[] {
          "DUKE",
          "SETON HALL",
          "ILLINOIS",
          "CINCINNATI",
          "NORTH CAROLINA",
          "TEXAS",
          "XAVIER",
          "MISSISSIPPI STATE"
        };
    p1 = new String[] {"", "DUKE", "DUKE", "ILLINOIS", "TEXAS", "XAVIER", "DUKE", "XAVIER"};
    p2 =
        new String[] {
          "DUKE",
          "XAVIER",
          "ILLINOIS",
          "TEXAS",
          "SETON HALL",
          "MISSISSIPPI STATE",
          "CINCINNATI",
          "NORTH CAROLINA"
        };
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = new String[] {"JAVA", "VISUAL BASIC"};
    p1 = new String[] {"VISUAL BASIC", ""};
    p2 = new String[] {"VISUAL BASIC", "JAVA"};
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
