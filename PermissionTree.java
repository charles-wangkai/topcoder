import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class PermissionTree {
	public int[] findHome(String[] folders, String[] users) {
		int[] parents = new int[folders.length];
		Map<String, Set<Integer>> userToFolders = new HashMap<>();
		for (int i = 0; i < folders.length; ++i) {
			String[] parts = folders[i].split(" ");

			int parent = Integer.parseInt(parts[0]);
			parents[i] = parent;

			for (String user : parts[1].split(",")) {
				if (!userToFolders.containsKey(user)) {
					userToFolders.put(user, new HashSet<>());
				}

				userToFolders.get(user).add(i);
			}
		}

		return Arrays.stream(users).mapToInt(user -> computeHome(parents, userToFolders, user)).toArray();
	}

	int computeHome(int[] parents, Map<String, Set<Integer>> userToFolders, String user) {
		int result = -1;
		for (int folder : userToFolders.getOrDefault(user, new HashSet<>())) {
			if (result == -1) {
				result = folder;
			} else {
				result = findLCA(parents, result, folder);
			}
		}

		return result;
	}

	int findLCA(int[] parents, int folder1, int folder2) {
		List<Integer> path1 = buildPath(parents, folder1);
		List<Integer> path2 = buildPath(parents, folder2);

		int index = 0;
		while (index + 1 < path1.size() && index + 1 < path2.size()
				&& path1.get(index + 1).equals(path2.get(index + 1))) {
			++index;
		}

		return path1.get(index);
	}

	List<Integer> buildPath(int[] parents, int folder) {
		List<Integer> path = new ArrayList<>();
		while (true) {
			path.add(folder);
			if (folder == 0) {
				break;
			}

			folder = parents[folder];
		}

		Collections.reverse(path);

		return path;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, String[] p1, boolean hasAnswer, int[] p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p1[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		PermissionTree obj;
		int[] answer;
		obj = new PermissionTree();
		long startTime = System.currentTimeMillis();
		answer = obj.findHome(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p2.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p2[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p2.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p2[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		String[] p0;
		String[] p1;
		int[] p2;

		// ----- test 0 -----
		p0 = new String[] { "0 Admin", "0 Joe,Phil", "0 Joe" };
		p1 = new String[] { "Admin", "Joe", "Phil" };
		p2 = new int[] { 0, 0, 1 };
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new String[] { "0 Admin" };
		p1 = new String[] { "Peter", "Paul", "Mary" };
		p2 = new int[] { -1, -1, -1 };
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new String[] { "0 Admin", "2 John", "0 Peter,John", "0 Tim", "1 John" };
		p1 = new String[] { "John" };
		p2 = new int[] { 2 };
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new String[] { "0 Admin", "0 Jeff", "1 Mark,Tim", "1 Tim,Jeff", "0 Dan", "4 Ed", "4 Tom", "4 Kyle,Ed",
				"0 Ben", "8 Rich", "8 Sam", "8 Tim" };
		p1 = new String[] { "Jeff", "Ed", "Tim", "Steve" };
		p2 = new int[] { 1, 4, 0, -1 };
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = new String[] { "0 Admin", "0 Bob,Joe,Bob", "0 Joe" };
		p1 = new String[] { "Joe", "Bob" };
		p2 = new int[] { 0, 1 };
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
