import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

public class SimplePath {
	static final int[] X_OFFSETS = { 0, 1, 0, -1 };
	static final int[] Y_OFFSETS = { 1, 0, -1, 0 };

	static final Map<Character, Integer> DIRECTION_TO_INDEX = new HashMap<>();
	static {
		DIRECTION_TO_INDEX.put('N', 0);
		DIRECTION_TO_INDEX.put('E', 1);
		DIRECTION_TO_INDEX.put('S', 2);
		DIRECTION_TO_INDEX.put('W', 3);
	}

	public int trouble(String direction, int[] length) {
		int result = Integer.MAX_VALUE;

		Map<Point, Integer> pointToSegment = new HashMap<>();
		pointToSegment.put(new Point(0, 0), 0);
		int x = 0;
		int y = 0;
		for (int i = 0; i < direction.length(); ++i) {
			int xOffset = X_OFFSETS[DIRECTION_TO_INDEX.get(direction.charAt(i))];
			int yOffset = Y_OFFSETS[DIRECTION_TO_INDEX.get(direction.charAt(i))];

			for (int j = 0; j < length[i]; ++j) {
				x += xOffset;
				y += yOffset;

				Point point = new Point(x, y);
				if (pointToSegment.containsKey(point)) {
					result = Math.min(result, pointToSegment.get(point));
				}

				pointToSegment.put(point, i);
			}
		}

		return (result == Integer.MAX_VALUE) ? -1 : result;
	}

	class Point {
		int x;
		int y;

		Point(int x, int y) {
			this.x = x;
			this.y = y;
		}

		@Override
		public int hashCode() {
			return Objects.hash(x, y);
		}

		@Override
		public boolean equals(Object obj) {
			Point other = (Point) obj;

			return x == other.x && y == other.y;
		}
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SimplePath obj;
		int answer;
		obj = new SimplePath();
		long startTime = System.currentTimeMillis();
		answer = obj.trouble(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		String p0;
		int[] p1;
		int p2;

		// ----- test 0 -----
		p0 = "NWSEEN";
		p1 = new int[] { 5, 5, 3, 2, 5, 2 };
		p2 = 0;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = "NWWS";
		p1 = new int[] { 10, 3, 7, 10 };
		p2 = -1;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = "NWES";
		p1 = new int[] { 2, 2, 1, 2 };
		p2 = 1;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = "NWSE";
		p1 = new int[] { 100, 100, 100, 100 };
		p2 = 0;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = "EEEEEW";
		p1 = new int[] { 1, 1, 1, 1, 1, 10 };
		p2 = 0;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
