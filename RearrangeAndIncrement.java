import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class RearrangeAndIncrement {
  public int[] change(int X, int Y) {
    List<Integer> result = new ArrayList<>();

    int current = X;
    while (true) {
      result.add(current);
      if (current == 1) {
        break;
      }

      if (current % 10 != 0) {
        current += 10 - current % 10;
        result.add(current);
      }

      current =
          Integer.parseInt(
              String.valueOf(current)
                  .chars()
                  .sorted()
                  .mapToObj(c -> (char) c)
                  .map(String::valueOf)
                  .collect(Collectors.joining()));
    }

    if (Y <= 14) {
      result.add(Y);
    } else {
      String s = String.valueOf(Y);

      char[] digits = s.toCharArray();
      for (int i = 1; i < digits.length; ++i) {
        digits[i] = '0';
      }

      int target = Integer.parseInt(new String(digits));
      search(result, target - 1);
      result.add(target);

      for (int i = 1; i < digits.length; ++i) {
        digits[digits.length - 1] = s.charAt(i);
        result.add(Integer.parseInt(new String(digits)));

        swap(digits, i, digits.length - 1);
        result.add(Integer.parseInt(new String(digits)));
      }
    }

    return result.stream().mapToInt(Integer::intValue).toArray();
  }

  void search(List<Integer> result, int target) {
    String s = String.valueOf(target);

    int current = 1;
    while (String.valueOf(current).length() < s.length()) {
      if (String.valueOf(current + 13).length() > String.valueOf(current).length()) {
        current += 13;
        result.add(current);
      } else {
        current += 9 - current % 10;
        result.add(current);

        current =
            Integer.parseInt(
                String.valueOf(current)
                    .chars()
                    .boxed()
                    .sorted(Comparator.reverseOrder())
                    .map(c -> (char) c.intValue())
                    .map(String::valueOf)
                    .collect(Collectors.joining()));
        result.add(current);
      }
    }

    char[] digits = String.valueOf(current).toCharArray();
    swap(digits, 0, digits.length - 1);
    result.add(Integer.parseInt(new String(digits)));

    for (int i = 0; i < digits.length; ++i) {
      digits[digits.length - 1] = s.charAt(i);
      result.add(Integer.parseInt(new String(digits)));

      swap(digits, i, digits.length - 1);
      result.add(Integer.parseInt(new String(digits)));
    }
  }

  void swap(char[] digits, int index1, int index2) {
    char temp = digits[index1];
    digits[index1] = digits[index2];
    digits[index2] = temp;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, int p0, int p1, boolean hasAnswer, int[] p2) {
    System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
    System.out.println("]");
    RearrangeAndIncrement obj;
    int[] answer;
    obj = new RearrangeAndIncrement();
    long startTime = System.currentTimeMillis();
    answer = obj.change(p0, p1);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.print("\t" + "{");
      for (int i = 0; p2.length > i; ++i) {
        if (i > 0) {
          System.out.print(",");
        }
        System.out.print(p2[i]);
      }
      System.out.println("}");
    }
    System.out.println("Your answer:");
    System.out.print("\t" + "{");
    for (int i = 0; answer.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(answer[i]);
    }
    System.out.println("}");
    if (hasAnswer) {
      if (answer.length != p2.length) {
        res = false;
      } else {
        for (int i = 0; answer.length > i; ++i) {
          if (answer[i] != p2[i]) {
            res = false;
          }
        }
      }
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int p0;
    int p1;
    int[] p2;

    // ----- test 0 -----
    p0 = 10234;
    p1 = 1247;
    p2 = new int[] {10234, 1234, 1247};
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = 10234;
    p1 = 10248;
    p2 = new int[] {10234, 10244, 10248};
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = 999997;
    p1 = 1000001;
    p2 = new int[] {999997, 999998, 999999, 1000000, 1000001};
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = 1000000;
    p1 = 1000;
    p2 = new int[] {1000000, 1000};
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = 1111111;
    p1 = 1111232;
    p2 = new int[] {1111111, 1111122, 1111221, 1111232};
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 5 -----
    p0 = 47;
    p1 = 47;
    p2 = new int[] {47};
    all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
