import java.util.ArrayList;
import java.util.List;
import java.util.stream.IntStream;

public class Resistance {
	public double[] spyProbability(int P, int S, String[] missions) {
		List<boolean[]> assignments = new ArrayList<>();
		for (int code = 0; code < (1 << P); ++code) {
			boolean[] assignment = decode(P, code);
			if (check(S, missions, assignment)) {
				assignments.add(assignment);
			}
		}

		return assignments.isEmpty() ? new double[0]
				: IntStream.range(0, P).mapToDouble(
						i -> (double) IntStream.range(0, assignments.size()).filter(j -> assignments.get(j)[i]).count()
								/ assignments.size())
						.toArray();
	}

	boolean[] decode(int size, int code) {
		boolean[] result = new boolean[size];
		for (int i = 0; i < result.length; ++i) {
			result[i] = (code & 1) != 0;
			code >>= 1;
		}

		return result;
	}

	boolean check(int S, String[] missions, boolean[] assignment) {
		if (IntStream.range(0, assignment.length).filter(i -> assignment[i]).count() != S) {
			return false;
		}

		for (String mission : missions) {
			if (mission.charAt(0) == 'F' && IntStream.range(0, assignment.length)
					.allMatch(i -> mission.charAt(i + 1) == '0' || !assignment[i])) {
				return false;
			}
		}

		return true;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, String[] p2, boolean hasAnswer,
			double[] p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p2[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		Resistance obj;
		double[] answer;
		obj = new Resistance();
		long startTime = System.currentTimeMillis();
		answer = obj.spyProbability(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p3.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p3[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p3.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (Math.abs(p3[i] - answer[i]) > 1e-9 * Math.max(1.0, Math.abs(p3[i]))) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int p0;
		int p1;
		String[] p2;
		double[] p3;

		// ----- test 0 -----
		p0 = 4;
		p1 = 1;
		p2 = new String[] { "S0110", "F1100", "S0011" };
		p3 = new double[] { 0.5D, 0.5D, 0.0D, 0.0D };
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = 4;
		p1 = 2;
		p2 = new String[] { "F0100", "S0101", "F1010", "S1011" };
		p3 = new double[] { 0.5D, 1.0D, 0.5D, 0.0D };
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = 3;
		p1 = 1;
		p2 = new String[] { "F110", "F101", "F011" };
		p3 = new double[] {};
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = 5;
		p1 = 2;
		p2 = new String[] { "F11000", "S00011", "F10100", "S01111" };
		p3 = new double[] { 0.8D, 0.4D, 0.4D, 0.2D, 0.2D };
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = 9;
		p1 = 3;
		p2 = new String[] { "S100001100", "F011110000", "F001000010", "F100010101", "S010010001", "F100001010",
				"F000100100" };
		p3 = new double[] { 0.3D, 0.1D, 0.4D, 0.5D, 0.2D, 0.1D, 0.6D, 0.7D, 0.1D };
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
