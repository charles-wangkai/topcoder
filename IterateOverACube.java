public class IterateOverACube {
	public int[] findCell(int N, long index) {
		int[] counts2 = new int[2 * N - 1];
		for (int i = 0; i < counts2.length; ++i) {
			counts2[i] = Math.min(i + 1, counts2.length - i);
		}

		long count3 = 0;
		int beginIndex = -N;
		int endIndex = -1;
		long[] counts3 = new long[3 * N - 2];
		for (int i = 0; i < counts3.length; ++i) {
			if (beginIndex >= 0) {
				count3 -= counts2[beginIndex];
			}
			++beginIndex;

			++endIndex;
			if (endIndex < counts2.length) {
				count3 += counts2[endIndex];
			}

			counts3[i] = count3;
		}

		int sum3 = 0;
		while (index >= counts3[sum3]) {
			index -= counts3[sum3];
			++sum3;
		}

		for (int x = 0;; ++x) {
			int sum2 = sum3 - x;
			if (sum2 >= counts2.length) {
				continue;
			}

			if (index >= counts2[sum2]) {
				index -= counts2[sum2];
			} else {
				for (int y = 0;; ++y) {
					int z = sum2 - y;
					if (z >= N) {
						continue;
					}

					if (index == 0) {
						return new int[] { x, y, z };
					}

					--index;
				}
			}
		}
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, long p1, boolean hasAnswer, int[] p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		IterateOverACube obj;
		int[] answer;
		obj = new IterateOverACube();
		long startTime = System.currentTimeMillis();
		answer = obj.findCell(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p2.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p2[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p2.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p2[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int p0;
		long p1;
		int[] p2;

		// ----- test 0 -----
		p0 = 3;
		p1 = 9L;
		p2 = new int[] { 2, 0, 0 };
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = 3;
		p1 = 10L;
		p2 = new int[] { 0, 1, 2 };
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = 4747;
		p1 = 106968940722L;
		p2 = new int[] { 4746, 4746, 4746 };
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = 4;
		p1 = 32L;
		p2 = new int[] { 0, 2, 3 };
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
