import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Pancakes {
  public String[] makePancakes(int N, int P) {
    if (N <= P) {
      return new String[] {
        IntStream.range(0, P)
            .mapToObj(i -> (i < N) ? String.valueOf((char) ('A' + i)) : "-")
            .collect(Collectors.joining()),
        IntStream.range(0, P)
            .mapToObj(i -> (i < N) ? String.valueOf((char) ('a' + i)) : "-")
            .collect(Collectors.joining())
      };
    }

    String sequence =
        IntStream.range(0, N)
                .mapToObj(i -> String.valueOf((char) ('A' + i)))
                .collect(Collectors.joining())
            + IntStream.range(0, N)
                .mapToObj(i -> String.valueOf((char) ('a' + i)))
                .collect(Collectors.joining());
    int index = 0;
    List<String> result = new ArrayList<>();
    while (index < sequence.length()) {
      String minute = sequence.substring(index, Math.min(sequence.length(), index + P));
      while (minute.length() != P) {
        minute += '-';
      }
      result.add(minute);

      index += P;
    }

    return result.toArray(new String[0]);
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, int p0, int p1, boolean hasAnswer, String[] p2) {
    System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
    System.out.println("]");
    Pancakes obj;
    String[] answer;
    obj = new Pancakes();
    long startTime = System.currentTimeMillis();
    answer = obj.makePancakes(p0, p1);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.print("\t" + "{");
      for (int i = 0; p2.length > i; ++i) {
        if (i > 0) {
          System.out.print(",");
        }
        System.out.print("\"" + p2[i] + "\"");
      }
      System.out.println("}");
    }
    System.out.println("Your answer:");
    System.out.print("\t" + "{");
    for (int i = 0; answer.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print("\"" + answer[i] + "\"");
    }
    System.out.println("}");
    if (hasAnswer) {
      if (answer.length != p2.length) {
        res = false;
      } else {
        for (int i = 0; answer.length > i; ++i) {
          if (!answer[i].equals(p2[i])) {
            res = false;
          }
        }
      }
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int p0;
    int p1;
    String[] p2;

    // ----- test 0 -----
    p0 = 1;
    p1 = 3;
    p2 = new String[] {"A--", "-a-"};
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = 3;
    p1 = 1;
    p2 = new String[] {"A", "c", "B", "C", "a", "b"};
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = 5;
    p1 = 4;
    p2 = new String[] {"bA-e", "ECad", "-BcD"};
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
