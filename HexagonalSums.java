import java.util.HashSet;
import java.util.Set;

public class HexagonalSums {
  static final int THRESHOLD = 1719;

  public int minLength(int N) {
    Set<Integer> hexs = new HashSet<>();
    for (int i = 1; ; ++i) {
      int hex = i * (2 * i - 1);
      if (hex > N) {
        break;
      }

      hexs.add(hex);
    }

    if (N <= THRESHOLD) {
      return search(hexs, N, 0, 6);
    }

    if (hexs.contains(N)) {
      return 1;
    }

    Set<Integer> twoSums = new HashSet<>();
    for (int hex1 : hexs) {
      for (int hex2 : hexs) {
        twoSums.add(hex1 + hex2);
      }
    }
    if (twoSums.contains(N)) {
      return 2;
    }

    for (int hex : hexs) {
      if (twoSums.contains(N - hex)) {
        return 3;
      }
    }

    return 4;
  }

  int search(Set<Integer> hexs, int rest, int count, int maxCount) {
    if (rest == 0) {
      return count;
    }
    if (count == maxCount) {
      return Integer.MAX_VALUE;
    }

    int result = Integer.MAX_VALUE;
    for (int hex : hexs) {
      if (hex <= rest) {
        result = Math.min(result, search(hexs, rest - hex, count + 1, maxCount));
      }
    }

    return result;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, int p1) {
    System.out.print("Test " + testNum + ": [" + p0);
    System.out.println("]");
    HexagonalSums obj;
    int answer;
    obj = new HexagonalSums();
    long startTime = System.currentTimeMillis();
    answer = obj.minLength(p0);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p1);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p1;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int p0;
    int p1;

    // ----- test 0 -----
    p0 = 26;
    p1 = 6;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = 130;
    p1 = 5;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = 146858;
    p1 = 4;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = 999999;
    p1 = 3;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = 1000000;
    p1 = 2;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------

    // ----- test 5 -----
    p0 = 145530;
    p1 = 1;
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
