import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

public class PolynomialMultiplier {
  public String product(String f1, String f2) {
    Map<Integer, Integer> expToCoef1 = buildExpToCoef(f1);
    Map<Integer, Integer> expToCoef2 = buildExpToCoef(f2);

    Map<Integer, Integer> expToCoef = new HashMap<>();
    for (int exp1 : expToCoef1.keySet()) {
      for (int exp2 : expToCoef2.keySet()) {
        addToExpToCoef(expToCoef, exp1 + exp2, expToCoef1.get(exp1) * expToCoef2.get(exp2));
      }
    }

    return expToCoef.keySet().stream()
        .sorted(Collections.reverseOrder())
        .map(
            exp -> {
              int coef = expToCoef.get(exp);

              if (exp == 0) {
                return String.valueOf(coef);
              }
              if (coef == 1) {
                return (exp == 1) ? "x" : String.format("x^%d", exp);
              }

              return (exp == 1) ? String.format("%d*x", coef) : String.format("%d*x^%d", coef, exp);
            })
        .collect(Collectors.joining(" + "));
  }

  Map<Integer, Integer> buildExpToCoef(String f) {
    Map<Integer, Integer> expToCoef = new HashMap<>();

    String[] parts = f.split(" \\+ ");
    for (String part : parts) {
      int xIndex = part.indexOf('x');
      int coef = (xIndex == 0) ? 1 : (part.charAt(0) - '0');

      int exp;
      if (xIndex == -1) {
        exp = 0;
      } else {
        if (xIndex == part.length() - 1) {
          exp = 1;
        } else {
          exp = part.charAt(xIndex + 2) - '0';
        }
      }

      addToExpToCoef(expToCoef, exp, coef);
    }

    return expToCoef;
  }

  void addToExpToCoef(Map<Integer, Integer> expToCoef, int exp, int coef) {
    expToCoef.put(exp, expToCoef.getOrDefault(exp, 0) + coef);
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, String p0, String p1, boolean hasAnswer, String p2) {
    System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "\"" + p1 + "\"");
    System.out.println("]");
    PolynomialMultiplier obj;
    String answer;
    obj = new PolynomialMultiplier();
    long startTime = System.currentTimeMillis();
    answer = obj.product(p0, p1);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + "\"" + p2 + "\"");
    }
    System.out.println("Your answer:");
    System.out.println("\t" + "\"" + answer + "\"");
    if (hasAnswer) {
      res = answer.equals(p2);
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    String p0;
    String p1;
    String p2;

    // ----- test 0 -----
    p0 = "1 + x";
    p1 = "1 + x";
    p2 = "x^2 + 2*x + 1";
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = "4*x^4 + 1";
    p1 = "3*x^5 + 7*x";
    p2 = "12*x^9 + 31*x^5 + 7*x";
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = "1 + x + 1 + x";
    p1 = "5 + 5";
    p2 = "20*x + 20";
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = "8*x^5";
    p1 = "9*x^7";
    p2 = "72*x^12";
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = "5*x^3 + x^4 + 8 + 2*x^6";
    p1 = "3*x^5 + 4*x + 7*x^9";
    p2 = "14*x^15 + 7*x^13 + 35*x^12 + 6*x^11 + 59*x^9 + 15*x^8 + 8*x^7 + 28*x^5 + 20*x^4 + 32*x";
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
