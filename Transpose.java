import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Transpose {
  public int numSwaps(int M, int N) {
    int[] targetValues = IntStream.range(0, M * N).map(i -> computeTargetValue(M, N, i)).toArray();

    int[] current = IntStream.range(0, M * N).toArray();
    Map<Integer, Integer> valueToIndex =
        IntStream.range(0, M * N)
            .boxed()
            .collect(Collectors.toMap(Function.identity(), Function.identity()));

    int result = 0;
    for (int i = 0; i < current.length; ++i) {
      if (current[i] != targetValues[i]) {
        swap(current, i, valueToIndex.get(targetValues[i]), valueToIndex);
        ++result;
      }
    }

    return result;
  }

  void swap(int[] current, int index1, int index2, Map<Integer, Integer> valueToIndex) {
    int value1 = current[index1];
    int value2 = current[index2];

    current[index1] = value2;
    current[index2] = value1;

    valueToIndex.put(value1, index2);
    valueToIndex.put(value2, index1);
  }

  int computeTargetValue(int M, int N, int index) {
    int r = index / M;
    int c = index % M;

    return c * N + r;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, int p0, int p1, boolean hasAnswer, int p2) {
    System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
    System.out.println("]");
    Transpose obj;
    int answer;
    obj = new Transpose();
    long startTime = System.currentTimeMillis();
    answer = obj.numSwaps(p0, p1);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p2);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p2;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;

    // ----- test 0 -----
    p0 = 3;
    p1 = 3;
    p2 = 3;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = 2;
    p1 = 3;
    p2 = 3;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = 3;
    p1 = 5;
    p2 = 10;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = 50;
    p1 = 50;
    p2 = 1225;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = 49;
    p1 = 51;
    p2 = 2492;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
