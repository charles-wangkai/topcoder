import java.util.Arrays;

public class EigenVector {
	int[] minEigenVector;

	public int[] findEigenVector(String[] A) {
		int size = A.length;

		int[][] matrix = new int[size][size];
		for (int i = 0; i < size; ++i) {
			String[] parts = A[i].split(" ");

			for (int j = 0; j < size; ++j) {
				matrix[i][j] = Integer.parseInt(parts[j]);
			}
		}

		minEigenVector = null;
		search(matrix, new int[size], 0, false, 9);

		return minEigenVector;
	}

	void search(int[][] matrix, int[] vector, int index, boolean hasFirstNonZero, int limit) {
		int size = matrix.length;

		if (index == size) {
			if (limit != 9 && isEigenVector(matrix, vector) && isSmaller(vector)) {
				minEigenVector = Arrays.copyOf(vector, vector.length);
			}

			return;
		}

		for (int i = -limit; i <= limit; ++i) {
			if (!hasFirstNonZero && i < 0) {
				continue;
			}

			vector[index] = i;
			search(matrix, vector, index + 1, hasFirstNonZero || i != 0, limit - Math.abs(i));
		}
	}

	boolean isEigenVector(int[][] matrix, int[] vector) {
		int size = matrix.length;

		int[] product = new int[size];
		for (int i = 0; i < size; ++i) {
			for (int j = 0; j < size; ++j) {
				product[i] += matrix[i][j] * vector[j];
			}
		}

		int eigenValue;
		for (int i = 0;; ++i) {
			if (vector[i] != 0) {
				if (product[i] == 0 || product[i] % vector[i] != 0) {
					return false;
				}

				eigenValue = product[i] / vector[i];

				break;
			}
		}

		for (int i = 0; i < size; ++i) {
			if (product[i] != vector[i] * eigenValue) {
				return false;
			}
		}

		return true;
	}

	boolean isSmaller(int[] eigenVector) {
		if (minEigenVector == null) {
			return true;
		}

		for (int i = 0; i < eigenVector.length; ++i) {
			if (eigenVector[i] != minEigenVector[i]) {
				return eigenVector[i] < minEigenVector[i];
			}
		}

		return false;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int[] p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		EigenVector obj;
		int[] answer;
		obj = new EigenVector();
		long startTime = System.currentTimeMillis();
		answer = obj.findEigenVector(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p1[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p1[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		String[] p0;
		int[] p1;

		// ----- test 0 -----
		p0 = new String[] { "1 0 0 0 0", "0 1 0 0 0", "0 0 1 0 0", "0 0 0 1 0", "0 0 0 0 1" };
		p1 = new int[] { 0, 0, 0, 0, 1 };
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new String[] { "100 0 0 0", "0 200 0 0", "0 0 333 0", "0 0 0 42" };
		p1 = new int[] { 0, 0, 0, 1 };
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new String[] { "10 -10 -10 10", "20 40 -10 -10", "10 -10 10 20", "10 10 20 5" };
		p1 = new int[] { 1, -5, 2, 0 };
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new String[] { "30 20", "87 2" };
		p1 = new int[] { 2, 3 };
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = new String[] { "7 7", "1 1" };
		p1 = new int[] { 7, 1 };
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
