import java.util.Arrays;

public class AnnoyingPasswords {
  static final int MODULUS = 1_000_000_007;
  static final int UPPER_NUM = 26;
  static final int LOWER_NUM = 26;
  static final int DIGIT_NUM = 10;

  public int count(int U, int L, int D) {
    int[][][][] dp = new int[UPPER_NUM + 1][LOWER_NUM + 1][DIGIT_NUM + 1][4];
    dp[U][L][D][0] = 1;

    for (int i = 0; i < U + L + D; ++i) {
      int[][][][] nextDp = new int[UPPER_NUM + 1][LOWER_NUM + 1][DIGIT_NUM + 1][4];
      for (int u = 0; u <= UPPER_NUM; ++u) {
        for (int l = 0; l <= LOWER_NUM; ++l) {
          for (int d = 0; d <= DIGIT_NUM; ++d) {
            if (u != UPPER_NUM) {
              nextDp[u][l][d][1] =
                  addMod(addMod(dp[u + 1][l][d][0], dp[u + 1][l][d][2]), dp[u + 1][l][d][3]);
            }
            if (l != LOWER_NUM) {
              nextDp[u][l][d][2] =
                  addMod(addMod(dp[u][l + 1][d][0], dp[u][l + 1][d][1]), dp[u][l + 1][d][3]);
            }
            if (d != DIGIT_NUM) {
              nextDp[u][l][d][3] =
                  addMod(addMod(dp[u][l][d + 1][0], dp[u][l][d + 1][1]), dp[u][l][d + 1][2]);
            }
          }
        }
      }

      dp = nextDp;
    }

    return multiplyMod(
        Arrays.stream(dp[0][0][0]).reduce(this::addMod).getAsInt(),
        multiplyMod(multiplyMod(P(UPPER_NUM, U), P(LOWER_NUM, L)), P(DIGIT_NUM, D)));
  }

  int addMod(int x, int y) {
    return (x + y) % MODULUS;
  }

  int multiplyMod(int x, int y) {
    return (int) ((long) x * y % MODULUS);
  }

  int P(int n, int r) {
    int result = 1;
    for (int i = 0; i < r; ++i) {
      result = multiplyMod(result, n - i);
    }

    return result;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, int p0, int p1, int p2, boolean hasAnswer, int p3) {
    System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
    System.out.println("]");
    AnnoyingPasswords obj;
    int answer;
    obj = new AnnoyingPasswords();
    long startTime = System.currentTimeMillis();
    answer = obj.count(p0, p1, p2);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p3);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p3;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    int p3;

    // ----- test 0 -----
    p0 = 4;
    p1 = 1;
    p2 = 1;
    p3 = 0;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = 5;
    p1 = 0;
    p2 = 4;
    p3 = 783743727;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = 1;
    p1 = 1;
    p2 = 1;
    p3 = 40560;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = 2;
    p1 = 2;
    p2 = 3;
    p3 = 559599923;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = 0;
    p1 = 0;
    p2 = 0;
    p3 = 1;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
