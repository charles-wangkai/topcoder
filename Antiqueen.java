import java.util.Arrays;

public class Antiqueen {
  static final int MODULUS = 1_000_000_007;

  public int countPaths(int R, int C, int N) {
    int[][] dp = new int[R][C];
    for (int r = 0; r < R; ++r) {
      Arrays.fill(dp[r], 1);
    }

    for (int i = 0; i < N; ++i) {
      int total = 0;
      int[] rowSums = new int[R];
      int[] colSums = new int[C];
      int[] diagonalSums1 = new int[R + C - 1];
      int[] diagonalSums2 = new int[R + C - 1];
      for (int r = 0; r < R; ++r) {
        for (int c = 0; c < C; ++c) {
          total = addMod(total, dp[r][c]);
          rowSums[r] = addMod(rowSums[r], dp[r][c]);
          colSums[c] = addMod(colSums[c], dp[r][c]);
          diagonalSums1[r + c] = addMod(diagonalSums1[r + c], dp[r][c]);
          diagonalSums2[r - c + (C - 1)] = addMod(diagonalSums2[r - c + (C - 1)], dp[r][c]);
        }
      }

      int[][] nextDp = new int[R][C];
      for (int r = 0; r < R; ++r) {
        for (int c = 0; c < C; ++c) {
          nextDp[r][c] =
              addMod(
                  addMod(
                      total,
                      -addMod(
                          addMod(rowSums[r], colSums[c]),
                          addMod(diagonalSums1[r + c], diagonalSums2[r - c + (C - 1)]))),
                  multiplyMod(3, dp[r][c]));
        }
      }

      dp = nextDp;
    }

    int result = 0;
    for (int r = 0; r < R; ++r) {
      for (int c = 0; c < C; ++c) {
        result = addMod(result, dp[r][c]);
      }
    }

    return result;
  }

  int addMod(int x, int y) {
    return Math.floorMod(x + y, MODULUS);
  }

  int multiplyMod(int x, int y) {
    return Math.floorMod((long) x * y, MODULUS);
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, int p0, int p1, int p2, boolean hasAnswer, int p3) {
    System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
    System.out.println("]");
    Antiqueen obj;
    int answer;
    obj = new Antiqueen();
    long startTime = System.currentTimeMillis();
    answer = obj.countPaths(p0, p1, p2);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p3);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p3;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    int p3;

    // ----- test 0 -----
    p0 = 3;
    p1 = 3;
    p2 = 1;
    p3 = 16;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = 2;
    p1 = 3;
    p2 = 100;
    p3 = 4;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = 2;
    p1 = 4;
    p2 = 100;
    p3 = 9613417;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = 7;
    p1 = 8;
    p2 = 2;
    p3 = 64904;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = 200;
    p1 = 200;
    p2 = 200;
    p3 = 0;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, false, p3) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
