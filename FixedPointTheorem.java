import java.util.stream.IntStream;

public class FixedPointTheorem {
  public double cycleRange(double R) {
    double[] values = new double[201000];
    double x = 0.25;
    for (int i = 0; i < values.length; ++i) {
      x = R * x * (1 - x);
      values[i] = x;
    }

    return IntStream.range(200000, values.length).mapToDouble(i -> values[i]).max().getAsDouble()
        - IntStream.range(200000, values.length).mapToDouble(i -> values[i]).min().getAsDouble();
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, double p0, boolean hasAnswer, double p1) {
    System.out.print("Test " + testNum + ": [" + p0);
    System.out.println("]");
    FixedPointTheorem obj;
    double answer;
    obj = new FixedPointTheorem();
    long startTime = System.currentTimeMillis();
    answer = obj.cycleRange(p0);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p1);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = Math.abs(p1 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p1));
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    double p0;
    double p1;

    // ----- test 0 -----
    p0 = 0.1D;
    p1 = 0.0D;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = 3.05D;
    p1 = 0.14754098360655865D;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = 3.4499D;
    p1 = 0.4175631735867292D;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = 3.55D;
    p1 = 0.5325704489850351D;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = 3.565D;
    p1 = 0.5454276003030636D;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------

    // ----- test 5 -----
    p0 = 3.5689D;
    p1 = 0.5489996297493569D;
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------

    // ----- test 6 -----
    p0 = 3.00005D;
    p1 = 0.004713996108955176D;
    all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
