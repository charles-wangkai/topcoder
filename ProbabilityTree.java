import java.util.ArrayList;
import java.util.List;
import java.util.stream.IntStream;

public class ProbabilityTree {
	public int[] getOdds(String[] tree, int lowerBound, int upperBound) {
		Node[] nodes = new Node[tree.length];
		for (int i = 0; i < nodes.length; ++i) {
			nodes[i] = new Node();
		}
		nodes[0].p = Integer.parseInt(tree[0]) / 100.0;

		for (int i = 1; i < tree.length; ++i) {
			String[] parts = tree[i].split(" ");

			int parent = Integer.parseInt(parts[0]);
			nodes[parent].children.add(i);
			nodes[i].parent = parent;

			nodes[i].prob1 = Integer.parseInt(parts[1]) / 100.0;
			nodes[i].prob2 = Integer.parseInt(parts[2]) / 100.0;
		}

		search(nodes, 0);

		return IntStream.range(0, nodes.length)
				.filter(i -> nodes[i].p > lowerBound / 100.0 && nodes[i].p < upperBound / 100.0).toArray();
	}

	void search(Node[] nodes, int index) {
		if (index != 0) {
			int parent = nodes[index].parent;
			nodes[index].p = nodes[index].prob1 * nodes[parent].p + nodes[index].prob2 * (1 - nodes[parent].p);
		}

		for (int child : nodes[index].children) {
			search(nodes, child);
		}
	}

	class Node {
		double prob1;
		double prob2;
		double p;
		int parent;
		List<Integer> children = new ArrayList<>();
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, int p2, boolean hasAnswer, int[] p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + p1 + "," + p2);
		System.out.println("]");
		ProbabilityTree obj;
		int[] answer;
		obj = new ProbabilityTree();
		long startTime = System.currentTimeMillis();
		answer = obj.getOdds(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p3.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p3[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p3.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p3[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		String[] p0;
		int p1;
		int p2;
		int[] p3;

		// ----- test 0 -----
		p0 = new String[] { "40", "0 70 10" };
		p1 = 30;
		p2 = 50;
		p3 = new int[] { 0, 1 };
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new String[] { "20", "2 50 50", "0 50 50" };
		p1 = 49;
		p2 = 51;
		p3 = new int[] { 1, 2 };
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new String[] { "10", "0 99 41", "1 40 3", "2 91 43" };
		p1 = 81;
		p2 = 88;
		p3 = new int[] {};
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new String[] { "79", "0 64 52", "1 70 87", "0 38 99", "1 24 8" };
		p1 = 47;
		p2 = 81;
		p3 = new int[] { 0, 1, 2, 3 };
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = new String[] { "51", "29 58 3", "6 56 86", "18 97 1", "44 99 25", "33 69 90", "27 67 49", "32 15 19",
				"33 1 21", "45 12 33", "29 24 40", "45 86 74", "40 30 65", "0 18 27", "1 90 65", "0 47 62", "40 81 72",
				"42 25 56", "45 16 81", "8 94 92", "29 41 92", "24 4 29", "32 56 91", "20 16 77", "1 35 79", "45 77 61",
				"6 50 19", "20 69 43", "4 6 16", "15 55 26", "42 73 90", "40 8 49", "33 16 33", "15 95 47", "9 66 40",
				"25 80 39", "35 72 70", "27 10 36", "40 36 10", "32 2 48", "33 44 23", "22 51 45", "25 8 43",
				"18 32 96", "45 41 74", "0 51 6", "18 48 15" };
		p1 = 8;
		p2 = 82;
		p3 = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28,
				29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 };
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
