import java.util.Arrays;

public class SingleOrDouble {
  public double probAlice(int N, int D, int A, int B) {
    long[] counts = new long[N * D + 1];
    counts[0] = 1;
    for (int i = 0; i < N; ++i) {
      long[] nextCounts = new long[N * D + 1];
      for (int prev = 0; prev < counts.length; ++prev) {
        for (int d = 1; d <= D && prev + d < nextCounts.length; ++d) {
          nextCounts[prev + d] += counts[prev];
        }
      }

      counts = nextCounts;
    }

    long total = Arrays.stream(counts).sum();

    double pa = (double) counts[A] / total;
    double pb = (double) counts[B] / total;

    return (pa + pa * pb) / (pa + pa * pb + pb * pb);
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, int p0, int p1, int p2, int p3, boolean hasAnswer, double p4) {
    System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3);
    System.out.println("]");
    SingleOrDouble obj;
    double answer;
    obj = new SingleOrDouble();
    long startTime = System.currentTimeMillis();
    answer = obj.probAlice(p0, p1, p2, p3);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p4);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = Math.abs(p4 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p4));
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    int p3;
    double p4;

    // ----- test 0 -----
    p0 = 1;
    p1 = 2;
    p2 = 1;
    p3 = 2;
    p4 = 0.75D;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = 1;
    p1 = 6;
    p2 = 1;
    p3 = 2;
    p4 = 0.8749999999999999D;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = 2;
    p1 = 6;
    p2 = 2;
    p3 = 7;
    p4 = 0.538461538461538D;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = 3;
    p1 = 10;
    p2 = 29;
    p3 = 16;
    p4 = 0.3644067796610159D;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
