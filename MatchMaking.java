import java.util.Comparator;
import java.util.stream.IntStream;

public class MatchMaking {
  public String makeMatch(
      String[] namesWomen,
      String[] answersWomen,
      String[] namesMen,
      String[] answersMen,
      String queryWoman) {
    int n = namesWomen.length;
    int m = answersWomen[0].length();

    int[] sortedWomenIndices =
        IntStream.range(0, n)
            .boxed()
            .sorted(Comparator.comparing(i -> namesWomen[i]))
            .mapToInt(Integer::intValue)
            .toArray();
    int[] sortedMenIndices =
        IntStream.range(0, n)
            .boxed()
            .sorted(Comparator.comparing(i -> namesMen[i]))
            .mapToInt(Integer::intValue)
            .toArray();
    boolean[] usedMens = new boolean[n];

    for (int i = 0; ; ++i) {
      int womenIndex = sortedWomenIndices[i];

      int maxCommonNum = -1;
      int matchedMenIndex = -1;
      for (int menIndex : sortedMenIndices) {
        if (!usedMens[menIndex]) {
          int commonNum =
              (int)
                  IntStream.range(0, m)
                      .filter(
                          j -> answersWomen[womenIndex].charAt(j) == answersMen[menIndex].charAt(j))
                      .count();

          if (commonNum > maxCommonNum) {
            maxCommonNum = commonNum;
            matchedMenIndex = menIndex;
          }
        }
      }

      usedMens[matchedMenIndex] = true;

      if (namesWomen[womenIndex].equals(queryWoman)) {
        return namesMen[matchedMenIndex];
      }
    }
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum,
      String[] p0,
      String[] p1,
      String[] p2,
      String[] p3,
      String p4,
      boolean hasAnswer,
      String p5) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print("\"" + p0[i] + "\"");
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p1.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print("\"" + p1[i] + "\"");
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p2.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print("\"" + p2[i] + "\"");
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p3.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print("\"" + p3[i] + "\"");
    }
    System.out.print("}" + "," + "\"" + p4 + "\"");
    System.out.println("]");
    MatchMaking obj;
    String answer;
    obj = new MatchMaking();
    long startTime = System.currentTimeMillis();
    answer = obj.makeMatch(p0, p1, p2, p3, p4);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + "\"" + p5 + "\"");
    }
    System.out.println("Your answer:");
    System.out.println("\t" + "\"" + answer + "\"");
    if (hasAnswer) {
      res = answer.equals(p5);
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    String[] p0;
    String[] p1;
    String[] p2;
    String[] p3;
    String p4;
    String p5;

    // ----- test 0 -----
    p0 = new String[] {"Constance", "Bertha", "Alice"};
    p1 = new String[] {"aaba", "baab", "aaaa"};
    p2 = new String[] {"Chip", "Biff", "Abe"};
    p3 = new String[] {"bbaa", "baaa", "aaab"};
    p4 = "Bertha";
    p5 = "Biff";
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = new String[] {"Constance", "Bertha", "Alice"};
    p1 = new String[] {"aaba", "baab", "aaaa"};
    p2 = new String[] {"Chip", "Biff", "Abe"};
    p3 = new String[] {"bbaa", "baaa", "aaab"};
    p4 = "Constance";
    p5 = "Chip";
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = new String[] {"Constance", "Alice", "Bertha", "Delilah", "Emily"};
    p1 = new String[] {"baabaa", "ababab", "aaabbb", "bababa", "baabba"};
    p2 = new String[] {"Ed", "Duff", "Chip", "Abe", "Biff"};
    p3 = new String[] {"aabaab", "babbab", "bbbaaa", "abbbba", "abaaba"};
    p4 = "Constance";
    p5 = "Duff";
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = new String[] {"Constance", "Alice", "Bertha", "Delilah", "Emily"};
    p1 = new String[] {"baabaa", "ababab", "aaabbb", "bababa", "baabba"};
    p2 = new String[] {"Ed", "Duff", "Chip", "Abe", "Biff"};
    p3 = new String[] {"aabaab", "babbab", "bbbaaa", "abbbba", "abaaba"};
    p4 = "Delilah";
    p5 = "Chip";
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = new String[] {"Constance", "Alice", "Bertha", "Delilah", "Emily"};
    p1 = new String[] {"baabaa", "ababab", "aaabbb", "bababa", "baabba"};
    p2 = new String[] {"Ed", "Duff", "Chip", "Abe", "Biff"};
    p3 = new String[] {"aabaab", "babbab", "bbbaaa", "abbbba", "abaaba"};
    p4 = "Emily";
    p5 = "Ed";
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
    // ------------------

    // ----- test 5 -----
    p0 = new String[] {"anne", "Zoe"};
    p1 = new String[] {"a", "a"};
    p2 = new String[] {"bob", "chuck"};
    p3 = new String[] {"a", "a"};
    p4 = "Zoe";
    p5 = "bob";
    all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
    // ------------------

    // ----- test 6 -----
    p0 =
        new String[] {
          "F", "M", "S", "h", "q", "g", "r", "N", "U", "x", "H", "P", "o", "E", "R", "z", "L", "m",
          "e", "u", "K", "A", "w", "Q", "O", "v", "j", "a", "t", "p", "C", "G", "k", "c", "V", "B",
          "D", "s", "n", "i", "f", "T", "I", "l", "d", "J", "y", "b"
        };
    p1 =
        new String[] {
          "abaabbbb",
          "bbaabbbb",
          "aaabaaab",
          "aabbaaaa",
          "baabbaab",
          "aaababba",
          "bbabbbbb",
          "bbbabbba",
          "aaabbbba",
          "aabbbaaa",
          "abbabaaa",
          "babbabbb",
          "aaaaabba",
          "aaaabbaa",
          "abbbabaa",
          "babababa",
          "abbaaaaa",
          "bbababba",
          "baaaaaba",
          "baaaaabb",
          "bbbbabba",
          "ababbaaa",
          "abbbabab",
          "baabbbaa",
          "bbbaabbb",
          "aababbab",
          "ababbabb",
          "abbaabba",
          "baabbabb",
          "aaabaaab",
          "aabbbaba",
          "aabaaabb",
          "abababba",
          "aabbaaaa",
          "aabbabaa",
          "bababaaa",
          "aabaaaab",
          "bbbbaabb",
          "baaababb",
          "abaabbab",
          "aabbbaaa",
          "baabbaba",
          "bbabbbaa",
          "aabbbbaa",
          "abbbaaab",
          "abababbb",
          "ababaaba",
          "bababaaa"
        };
    p2 =
        new String[] {
          "f", "C", "v", "g", "Q", "z", "n", "c", "B", "o", "M", "F", "u", "x", "I", "T", "K", "L",
          "E", "U", "w", "A", "d", "t", "e", "R", "D", "s", "p", "q", "m", "r", "H", "j", "J", "V",
          "l", "a", "k", "h", "G", "y", "i", "P", "O", "N", "b", "S"
        };
    p3 =
        new String[] {
          "bbbaabab",
          "bbabaabb",
          "ababbbbb",
          "bbbababb",
          "baababaa",
          "bbaaabab",
          "abbabbaa",
          "bbbabbbb",
          "aabbabab",
          "abbababa",
          "aababbbb",
          "bababaab",
          "aaababbb",
          "baabbaba",
          "abaaaaab",
          "bbaababa",
          "babaabab",
          "abbabbba",
          "ababbbab",
          "baabbbab",
          "babbaaab",
          "abbbbaba",
          "bbabbbba",
          "baaabaab",
          "ababbabb",
          "abbbaabb",
          "bbbbaabb",
          "bbbaaabb",
          "baabbaba",
          "bbabaaab",
          "aabbbaab",
          "abbbbabb",
          "bbaaaaba",
          "bbbababa",
          "abbaabba",
          "bababbbb",
          "aabaaabb",
          "babbabab",
          "baaaabaa",
          "ababbaba",
          "aaabaabb",
          "bbaaabaa",
          "baaaaabb",
          "bbaabaab",
          "bbababab",
          "aabaaaab",
          "aaaaabab",
          "aabbaaba"
        };
    p4 = "U";
    p5 = "x";
    all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, true, p5) && all_right;
    // ------------------

    // ----- test 7 -----
    p0 =
        new String[] {
          "q", "M", "w", "y", "p", "N", "s", "r", "a", "H", "o", "n", "F", "m", "l", "b", "D", "j",
          "C", "u", "f", "I", "g", "L", "i", "x", "A", "G", "O", "k", "h", "d", "c", "E", "B", "v",
          "J", "z", "K", "e", "t"
        };
    p1 =
        new String[] {
          "aabbaaabb",
          "baabababb",
          "bbaababba",
          "bbbaaaaaa",
          "abaaaabaa",
          "bababbbab",
          "abbaabbaa",
          "aabababbb",
          "bababaaaa",
          "abbababaa",
          "aabbbbbba",
          "bbabbabab",
          "babaabbba",
          "babbabbbb",
          "baaabbbbb",
          "baaabaaaa",
          "aaabbaaab",
          "abbaabbbb",
          "abbabbbab",
          "bbaaaabba",
          "babbaaabb",
          "aabbabbab",
          "baaababba",
          "ababaabab",
          "bbbaabbab",
          "aaaabbabb",
          "babaaaaaa",
          "abbbbaaab",
          "aabaaabba",
          "bbbaaaaba",
          "bbbbbbaab",
          "aabbaaabb",
          "aabaabbab",
          "aababaaba",
          "bbabbbbab",
          "abbabaaab",
          "babaaabbb",
          "bababbaaa",
          "aabbaabaa",
          "baaabbabb",
          "bbbbbbbbb"
        };
    p2 =
        new String[] {
          "m", "k", "n", "q", "L", "E", "M", "l", "w", "x", "g", "e", "i", "z", "F", "r", "a", "h",
          "f", "D", "J", "K", "j", "v", "A", "t", "N", "y", "s", "c", "o", "p", "d", "b", "B", "G",
          "O", "I", "u", "C", "H"
        };
    p3 =
        new String[] {
          "bbaaabbba",
          "bbaaaaaab",
          "abaaababb",
          "baaaabbbb",
          "abbbababa",
          "baaaaaaaa",
          "aabbbbbab",
          "aaaaabbba",
          "baabababb",
          "babaaabab",
          "baaababaa",
          "bbbbaabba",
          "bbaabbabb",
          "bbaaababb",
          "abbabbaba",
          "aababaaab",
          "abbbbbbaa",
          "aabbaabaa",
          "bbbaabbba",
          "abbabbaba",
          "aaabbbaaa",
          "bbaabaaaa",
          "aabababbb",
          "abbbbabab",
          "baaabbbba",
          "bababbbba",
          "aababbaab",
          "bbaabbaab",
          "bbbaaabbb",
          "babbbbabb",
          "ababababb",
          "babaaabab",
          "bbaaaaaba",
          "aaaaabaaa",
          "abbaaabbb",
          "bbbbababb",
          "baabababb",
          "bbaabaaaa",
          "aaababbbb",
          "abbbbbbba",
          "bbaabbaaa"
        };
    p4 = "o";
    p5 = "C";
    all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, p4, true, p5) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
