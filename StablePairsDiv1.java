import java.util.Arrays;
import java.util.stream.IntStream;

public class StablePairsDiv1 {
	public int[] findMaxStablePairs(int n, int c, int k) {
		if (n == 1 || (k != 1 && c <= 3)) {
			return new int[0];
		}

		int[] sums = new int[k];
		sums[sums.length - 1] = n * 2 - 1;
		for (int i = sums.length - 2; i >= 0; --i) {
			sums[i] = sums[i + 1] - c;
		}

		if (sums[0] <= 2) {
			return new int[0];
		}

		return Arrays.stream(sums).flatMap(sum -> IntStream.of((sum - 1) / 2, sum - (sum - 1) / 2)).toArray();
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, boolean hasAnswer, int[] p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
		System.out.println("]");
		StablePairsDiv1 obj;
		int[] answer;
		obj = new StablePairsDiv1();
		long startTime = System.currentTimeMillis();
		answer = obj.findMaxStablePairs(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p3.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p3[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p3.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p3[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int p0;
		int p1;
		int p2;
		int[] p3;

		// ----- test 0 -----
		p0 = 5;
		p1 = 4;
		p2 = 2;
		p3 = new int[] { 2, 3, 4, 5 };
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = 4;
		p1 = 4;
		p2 = 2;
		p3 = new int[] { 1, 2, 3, 4 };
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = 1;
		p1 = 100;
		p2 = 1;
		p3 = new int[] {};
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = 3;
		p1 = 100;
		p2 = 1;
		p3 = new int[] { 2, 3 };
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = 10;
		p1 = 6;
		p2 = 3;
		p3 = new int[] { 2, 5, 6, 7, 9, 10 };
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 5 -----
		p0 = 12;
		p1 = 7;
		p2 = 3;
		p3 = new int[] { 4, 5, 6, 10, 11, 12 };
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
