public class FixedNumberOfDigits {
	public long sum(int start, int step, long numberOfDigits) {
		long n = -1;
		long lower = 0;
		long upper = 10_000_000_000_000_000L;
		while (lower <= upper) {
			long middle = (lower + upper) / 2;
			long digitNum = computeDigitNum(start, step, middle);
			if (digitNum <= numberOfDigits) {
				n = middle;
				lower = middle + 1;
			} else {
				upper = middle - 1;
			}
		}

		long digitNum = computeDigitNum(start, step, n);
		if (digitNum == numberOfDigits) {
			return start + step * n;
		}

		long current = start + step * n + step;

		return Long.parseLong(String.valueOf(current).substring(0, (int) (numberOfDigits - digitNum)));
	}

	long computeDigitNum(int start, int step, long n) {
		long result = 0;
		long begin = 0;
		long end = 9;
		for (int i = 1; i <= 16; ++i) {
			long lower = Math.floorDiv(begin - start + step - 1, step);
			long upper = Math.floorDiv(end - start, step);

			result += Math.max(0, Math.min(upper, n) - Math.max(lower, 0) + 1) * i;

			begin = (begin == 0) ? 10 : (begin * 10);
			end = end * 10 + 9;
		}

		return result;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, long p2, boolean hasAnswer, long p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
		System.out.println("]");
		FixedNumberOfDigits obj;
		long answer;
		obj = new FixedNumberOfDigits();
		long startTime = System.currentTimeMillis();
		answer = obj.sum(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int p0;
		int p1;
		long p2;
		long p3;

		// ----- test 0 -----
		p0 = 47;
		p1 = 10;
		p2 = 7L;
		p3 = 7L;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = 98;
		p1 = 1;
		p2 = 10L;
		p3 = 101L;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = 0;
		p1 = 1;
		p2 = 7L;
		p3 = 6L;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = 123456789;
		p1 = 10;
		p2 = 5L;
		p3 = 12345L;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = 123456789;
		p1 = 10;
		p2 = 17L;
		p3 = 12345679L;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 5 -----
		p0 = 12;
		p1 = 9;
		p2 = 4213628354389281L;
		p3 = 2;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
