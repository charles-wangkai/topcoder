import java.util.HashMap;
import java.util.Map;

public class MedalTable {
	public String[] generate(String[] results) {
		Map<String, Country> codeToCountry = new HashMap<>();
		for (String result : results) {
			String[] parts = result.split(" ");
			for (int i = 0; i < parts.length; ++i) {
				increaseMedal(codeToCountry, parts[i], i);
			}
		}

		return codeToCountry.values().stream().sorted((c1, c2) -> {
			for (int i = 0; i < c1.medals.length; ++i) {
				if (c1.medals[i] != c2.medals[i]) {
					return -Integer.compare(c1.medals[i], c2.medals[i]);
				}
			}

			return c1.code.compareTo(c2.code);
		}).map(c -> String.format("%s %d %d %d", c.code, c.medals[0], c.medals[1], c.medals[2])).toArray(String[]::new);
	}

	void increaseMedal(Map<String, Country> codeToCountry, String code, int index) {
		if (!codeToCountry.containsKey(code)) {
			codeToCountry.put(code, new Country(code));
		}

		++codeToCountry.get(code).medals[index];
	}

	class Country {
		String code;
		int[] medals = new int[3];

		Country(String code) {
			this.code = code;
		}
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, String[] p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		MedalTable obj;
		String[] answer;
		obj = new MedalTable();
		long startTime = System.currentTimeMillis();
		answer = obj.generate(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print("\"" + p1[i] + "\"");
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + answer[i] + "\"");
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (!answer[i].equals(p1[i])) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		String[] p0;
		String[] p1;

		// ----- test 0 -----
		p0 = new String[] { "ITA JPN AUS", "KOR TPE UKR", "KOR KOR GBR", "KOR CHN TPE" };
		p1 = new String[] { "KOR 3 1 0", "ITA 1 0 0", "TPE 0 1 1", "CHN 0 1 0", "JPN 0 1 0", "AUS 0 0 1", "GBR 0 0 1",
				"UKR 0 0 1" };
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new String[] { "USA AUT ROM" };
		p1 = new String[] { "USA 1 0 0", "AUT 0 1 0", "ROM 0 0 1" };
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new String[] { "GER AUT SUI", "AUT SUI GER", "SUI GER AUT" };
		p1 = new String[] { "AUT 1 1 1", "GER 1 1 1", "SUI 1 1 1" };
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
