import static java.util.Map.entry;

import java.util.HashMap;
import java.util.Map;

public class grafixGlobs {
  static final Map<String, Integer> OBJ_TO_INDEX =
      Map.ofEntries(entry("arc", 0), entry("circle", 1), entry("polygon", 2));
  static final int SIZE = OBJ_TO_INDEX.size();

  public int[] execute(String[] commands, int sel) {
    Map<Integer, int[]> idToGlob = new HashMap<>();
    for (String command : commands) {
      String[] parts = command.split(" ");
      if (parts[0].equals("make")) {
        int[] counts = new int[SIZE];
        ++counts[OBJ_TO_INDEX.get(parts[1])];

        idToGlob.put(generateId(idToGlob), counts);
      } else if (parts[0].equals("delete")) {
        idToGlob.remove(Integer.parseInt(parts[1]));
      } else if (parts[0].equals("merge")) {
        int id1 = Integer.parseInt(parts[1]);
        int id2 = Integer.parseInt(parts[2]);

        for (int i = 0; i < SIZE; ++i) {
          idToGlob.get(id1)[i] += idToGlob.get(id2)[i];
        }

        idToGlob.remove(id2);
      } else {
        int[] counts = idToGlob.remove(Integer.parseInt(parts[1]));
        for (int i = 0; i < SIZE; ++i) {
          for (int j = 0; j < counts[i]; ++j) {
            int[] newCounts = new int[SIZE];
            ++newCounts[i];

            idToGlob.put(generateId(idToGlob), newCounts);
          }
        }
      }
    }

    return idToGlob.getOrDefault(sel, new int[0]);
  }

  int generateId(Map<Integer, int[]> idToGlob) {
    for (int id = 0; ; ++id) {
      if (!idToGlob.containsKey(id)) {
        return id;
      }
    }
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(
      int testNum, String[] p0, int p1, boolean hasAnswer, int[] p2) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print("\"" + p0[i] + "\"");
    }
    System.out.print("}" + "," + p1);
    System.out.println("]");
    grafixGlobs obj;
    int[] answer;
    obj = new grafixGlobs();
    long startTime = System.currentTimeMillis();
    answer = obj.execute(p0, p1);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.print("\t" + "{");
      for (int i = 0; p2.length > i; ++i) {
        if (i > 0) {
          System.out.print(",");
        }
        System.out.print(p2[i]);
      }
      System.out.println("}");
    }
    System.out.println("Your answer:");
    System.out.print("\t" + "{");
    for (int i = 0; answer.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(answer[i]);
    }
    System.out.println("}");
    if (hasAnswer) {
      if (answer.length != p2.length) {
        res = false;
      } else {
        for (int i = 0; answer.length > i; ++i) {
          if (answer[i] != p2[i]) {
            res = false;
          }
        }
      }
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    String[] p0;
    int p1;
    int[] p2;

    // ----- test 0 -----
    p0 =
        new String[] {
          "make polygon", "make circle", "make polygon", "merge 0 1", "merge 2 0", "split 2"
        };
    p1 = 0;
    p2 = new int[] {0, 1, 0};
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 =
        new String[] {
          "make circle",
          "make circle",
          "make arc",
          "merge 2 1",
          "delete 0",
          "split 2",
          "delete 0",
          "make polygon"
        };
    p1 = 0;
    p2 = new int[] {0, 0, 1};
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 =
        new String[] {
          "make circle",
          "make circle",
          "make arc",
          "merge 2 1",
          "delete 0",
          "split 2",
          "delete 0",
          "make polygon"
        };
    p1 = 2;
    p2 = new int[] {};
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = new String[] {"make arc"};
    p1 = 999;
    p2 = new int[] {};
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 =
        new String[] {
          "make polygon",
          "make polygon",
          "make arc",
          "make circle",
          "make circle",
          "delete 3",
          "make polygon",
          "make arc",
          "make arc",
          "merge 1 3",
          "merge 1 4",
          "merge 2 1",
          "make arc",
          "make arc",
          "make circle",
          "make circle",
          "merge 6 5",
          "split 6",
          "merge 2 1"
        };
    p1 = 2;
    p2 = new int[] {2, 1, 2};
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
