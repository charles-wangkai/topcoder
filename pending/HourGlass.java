import java.util.SortedSet;
import java.util.TreeSet;

public class HourGlass {
	static final int SIZE = 10;

	SortedSet<Integer> times;

	public int[] measurable(int glass1, int glass2) {
		times = new TreeSet<>();
		search(glass1, glass2, 0, 0, true, 0);

		return times.stream().mapToInt(x -> x).toArray();
	}

	void search(int glass1, int glass2, int rest1, int rest2, boolean flippable, int time) {
		if (times.size() == SIZE && time >= times.last()) {
			return;
		}

		if (time != 0 && flippable) {
			times.add(time);
			if (times.size() == SIZE + 1) {
				times.remove(times.last());
			}
		}

		int minRest = Math.min(rest1, rest2);
		if (minRest != 0) {
			search(glass1, glass2, rest1 - minRest, rest2 - minRest, true, time + minRest);
		}

		int maxRest = Math.max(rest1, rest2);
		if (maxRest != 0) {
			search(glass1, glass2, 0, 0, true, time + maxRest);
		}

		if (flippable) {
			search(glass1, glass2, glass1 - rest1, rest2, false, time);
			search(glass1, glass2, rest1, glass2 - rest2, false, time);
			search(glass1, glass2, glass1 - rest1, glass2 - rest2, false, time);
		}
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, int[] p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		HourGlass obj;
		int[] answer;
		obj = new HourGlass();
		long startTime = System.currentTimeMillis();
		answer = obj.measurable(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p2.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p2[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p2.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p2[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int p0;
		int p1;
		int[] p2;

		// ----- test 0 -----
		p0 = 5;
		p1 = 7;
		p2 = new int[] { 5, 7, 9, 10, 11, 12, 13, 14, 15, 16 };
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = 13;
		p1 = 5;
		p2 = new int[] { 5, 10, 13, 15, 16, 17, 18, 19, 20, 21 };
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = 23;
		p1 = 23;
		p2 = new int[] { 23, 46, 69, 92, 115, 138, 161, 184, 207, 230 };
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = 24;
		p1 = 30;
		p2 = new int[] { 24, 30, 36, 42, 48, 54, 60, 66, 72, 78 };
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = 1;
		p1 = 50;
		p2 = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
