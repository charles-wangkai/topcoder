import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class AcademicJournal {
	public String[] rankByImpact(String[] papers) {
		Map<String, Journal> nameToJournal = new HashMap<>();
		for (String paper : papers) {
			String[] parts = paper.split("\\.");
			String name = parts[0];
			int[] citedIndices = (parts.length == 2)
					? Arrays.stream(parts[1].trim().split(" ")).mapToInt(Integer::parseInt).distinct().toArray()
					: new int[0];

			Journal journal = findJournal(nameToJournal, name);
			++journal.paperNum;

			for (int index : citedIndices) {
				Journal citedJournal = findJournal(nameToJournal, papers[index].split("\\.")[0]);
				if (!citedJournal.name.equals(name)) {
					++citedJournal.citationNum;
				}
			}
		}

		return nameToJournal.values().stream().sorted((j1, j2) -> {
			if (j1.citationNum * j2.paperNum != j2.citationNum * j1.paperNum) {
				return -Integer.compare(j1.citationNum * j2.paperNum, j2.citationNum * j1.paperNum);
			}
			if (j1.paperNum != j2.paperNum) {
				return -Integer.compare(j1.paperNum, j2.paperNum);
			}

			return j1.name.compareTo(j2.name);
		}).map(j -> j.name).toArray(String[]::new);
	}

	Journal findJournal(Map<String, Journal> nameToJournal, String name) {
		if (!nameToJournal.containsKey(name)) {
			nameToJournal.put(name, new Journal(name));
		}

		return nameToJournal.get(name);
	}

	class Journal {
		String name;
		int paperNum;
		int citationNum;

		Journal(String name) {
			this.name = name;
		}
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, String[] p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		AcademicJournal obj;
		String[] answer;
		obj = new AcademicJournal();
		long startTime = System.currentTimeMillis();
		answer = obj.rankByImpact(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print("\"" + p1[i] + "\"");
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + answer[i] + "\"");
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (!answer[i].equals(p1[i])) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		String[] p0;
		String[] p1;

		// ----- test 0 -----
		p0 = new String[] { "A.", "B. 0", "C. 1 0 3", "C. 2" };
		p1 = new String[] { "A", "B", "C" };
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new String[] { "RESPECTED JOURNAL.", "MEDIOCRE JOURNAL. 0", "LOUSY JOURNAL. 0 1", "RESPECTED JOURNAL.",
				"MEDIOCRE JOURNAL. 3", "LOUSY JOURNAL. 4 3 3 4", "RESPECTED SPECIFIC JOURNAL.",
				"MEDIOCRE SPECIFIC JOURNAL. 6", "LOUSY SPECIFIC JOURNAL. 6 7" };
		p1 = new String[] { "RESPECTED JOURNAL", "RESPECTED SPECIFIC JOURNAL", "MEDIOCRE JOURNAL",
				"MEDIOCRE SPECIFIC JOURNAL", "LOUSY JOURNAL", "LOUSY SPECIFIC JOURNAL" };
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new String[] { "NO CITATIONS.", "COMPLETELY ORIGINAL." };
		p1 = new String[] { "COMPLETELY ORIGINAL", "NO CITATIONS" };
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new String[] { "CONTEMPORARY PHYSICS. 5 4 6 8 7 1 9", "EUROPHYSICS LETTERS. 9",
				"J PHYS CHEM REF D. 5 4 6 8 7 1 9", "J PHYS SOC JAPAN. 5 4 6 8 7 1 9",
				"PHYSICAL REVIEW LETTERS. 5 6 8 7 1 9", "PHYSICS LETTERS B. 6 8 7 1 9", "PHYSICS REPORTS. 8 7 1 9",
				"PHYSICS TODAY. 1 9", "REP PROGRESS PHYSICS. 7 1 9", "REV MODERN PHYSICS." };
		p1 = new String[] { "REV MODERN PHYSICS", "EUROPHYSICS LETTERS", "PHYSICS TODAY", "REP PROGRESS PHYSICS",
				"PHYSICS REPORTS", "PHYSICS LETTERS B", "PHYSICAL REVIEW LETTERS", "CONTEMPORARY PHYSICS",
				"J PHYS CHEM REF D", "J PHYS SOC JAPAN" };
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
