import java.util.Arrays;

public class YahtzeeRoll {
	public double bestChoice(int[] dice) {
		double result = 0;
		for (int code = 0; code < (1 << dice.length); ++code) {
			result = Math.max(result, search(dice, code, 0, 1));
		}

		return result;
	}

	double search(int[] dice, int code, int index, double prob) {
		if (index == dice.length) {
			return prob * computeScore(dice);
		}

		if ((code & (1 << index)) == 0) {
			return search(dice, code, index + 1, prob);
		}

		double result = 0;
		int oldValue = dice[index];
		for (int i = 1; i <= 6; ++i) {
			dice[index] = i;
			result += search(dice, code, index + 1, prob / 6);
		}

		dice[index] = oldValue;

		return result;
	}

	int computeScore(int[] dice) {
		int[] sorted = Arrays.stream(dice).sorted().toArray();
		int[] distinctSorted = Arrays.stream(dice).distinct().sorted().toArray();

		if (sorted[0] == sorted[4]) {
			return 50;
		} else if (sorted[0] + 1 == sorted[1] && sorted[1] + 1 == sorted[2] && sorted[2] + 1 == sorted[3]
				&& sorted[3] + 1 == sorted[4]) {
			return 40;
		} else if (distinctSorted.length >= 4 && ((distinctSorted[0] + 1 == distinctSorted[1]
				&& distinctSorted[1] + 1 == distinctSorted[2] && distinctSorted[2] + 1 == distinctSorted[3])
				|| (distinctSorted.length == 5 && distinctSorted[1] + 1 == distinctSorted[2]
						&& distinctSorted[2] + 1 == distinctSorted[3] && distinctSorted[3] + 1 == distinctSorted[4]))) {
			return 30;
		} else if (sorted[0] == sorted[1] && sorted[3] == sorted[4]
				&& (sorted[2] == sorted[0] || sorted[2] == sorted[4])) {
			return 25;
		}

		return 0;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, double p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		YahtzeeRoll obj;
		double answer;
		obj = new YahtzeeRoll();
		long startTime = System.currentTimeMillis();
		answer = obj.bestChoice(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = Math.abs(p1 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p1));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int[] p0;
		double p1;

		// ----- test 0 -----
		p0 = new int[] { 1, 1, 1, 1, 2 };
		p1 = 8.333333333333334D;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new int[] { 1, 1, 1, 2, 2 };
		p1 = 25.0D;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new int[] { 2, 3, 4, 5, 5 };
		p1 = 33.333333333333336D;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new int[] { 2, 2, 3, 4, 4 };
		p1 = 17.77777777777778D;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = new int[] { 6, 1, 3, 5, 5 };
		p1 = 9.722222222222221D;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
