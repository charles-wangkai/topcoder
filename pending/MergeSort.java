public class MergeSort {
	int comparisonCount;

	public int howManyComparisons(int[] numbers) {
		comparisonCount = 0;
		mergeSort(numbers, 0, numbers.length - 1);

		return comparisonCount;
	}

	void mergeSort(int[] numbers, int beginIndex, int endIndex) {
		int size = endIndex - beginIndex + 1;
		if (size <= 1) {
			return;
		}

		int middleIndex = (beginIndex + endIndex - 1) / 2;
		mergeSort(numbers, beginIndex, middleIndex);
		mergeSort(numbers, middleIndex + 1, endIndex);

		int[] merged = new int[size];
		int index = 0;
		int leftIndex = beginIndex;
		int rightIndex = middleIndex + 1;
		while (leftIndex <= middleIndex && rightIndex <= endIndex) {
			++comparisonCount;

			if (numbers[leftIndex] < numbers[rightIndex]) {
				merged[index] = numbers[leftIndex];
				++index;
				++leftIndex;
			} else if (numbers[leftIndex] > numbers[rightIndex]) {
				merged[index] = numbers[rightIndex];
				++index;
				++rightIndex;
			} else {
				merged[index] = numbers[leftIndex];
				++index;
				++leftIndex;

				merged[index] = numbers[rightIndex];
				++index;
				++rightIndex;
			}
		}

		while (leftIndex <= middleIndex) {
			merged[index] = numbers[leftIndex];
			++index;
			++leftIndex;
		}
		while (rightIndex <= endIndex) {
			merged[index] = numbers[rightIndex];
			++index;
			++rightIndex;
		}

		for (int i = beginIndex; i <= endIndex; ++i) {
			numbers[i] = merged[i - beginIndex];
		}
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		MergeSort obj;
		int answer;
		obj = new MergeSort();
		long startTime = System.currentTimeMillis();
		answer = obj.howManyComparisons(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int[] p0;
		int p1;

		// ----- test 0 -----
		p0 = new int[] { 1, 2, 3, 4 };
		p1 = 4;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new int[] { 2, 3, 2 };
		p1 = 2;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new int[] { -17 };
		p1 = 0;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new int[] {};
		p1 = 0;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = new int[] { -2000000000, 2000000000, 0, 0, 0, -2000000000, 2000000000, 0, 0, 0 };
		p1 = 19;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
