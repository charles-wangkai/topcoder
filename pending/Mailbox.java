import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Mailbox {
	public int impossible(String collection, String[] address) {
		Map<Character, Integer> collectionCharToCount = buildCharToCount(collection);

		return (int) Arrays.stream(address).filter(addr -> !canForm(collectionCharToCount, addr)).count();
	}

	boolean canForm(Map<Character, Integer> collectionCharToCount, String addr) {
		Map<Character, Integer> addrCharToCount = buildCharToCount(addr.replaceAll(" ", ""));

		return addrCharToCount.keySet().stream()
				.allMatch(addrChar -> addrCharToCount.get(addrChar) <= collectionCharToCount.getOrDefault(addrChar, 0));
	}

	Map<Character, Integer> buildCharToCount(String s) {
		Map<Character, Integer> charToCount = new HashMap<>();
		for (char ch : s.toCharArray()) {
			charToCount.put(ch, charToCount.getOrDefault(ch, 0) + 1);
		}

		return charToCount;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, String[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p1[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		Mailbox obj;
		int answer;
		obj = new Mailbox();
		long startTime = System.currentTimeMillis();
		answer = obj.impossible(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		String p0;
		String[] p1;
		int p2;

		// ----- test 0 -----
		p0 = "AAAAAAABBCCCCCDDDEEE123456789";
		p1 = new String[] { "123C", "123A", "123 ADA" };
		p2 = 0;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = "ABCDEFGHIJKLMNOPRSTUVWXYZ1234567890";
		p1 = new String[] { "2 FIRST ST", " 31 QUINCE ST", "606 BAKER" };
		p2 = 3;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = "ABCDAAST";
		p1 = new String[] { "111 A ST", "A BAD ST", "B BAD ST" };
		p2 = 2;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
