import java.util.HashMap;
import java.util.Map;

public class ParenReduction {
	static final Map<Character, Integer> operatorToPrecedence = new HashMap<>();
	static {
		operatorToPrecedence.put('^', 1);
		operatorToPrecedence.put('*', 2);
		operatorToPrecedence.put('/', 2);
		operatorToPrecedence.put('+', 3);
		operatorToPrecedence.put('-', 3);
	}

	public String pretty(String expr) {
		return format(expr).formatted;
	}

	Element format(String expr) {
		if (expr.length() == 1) {
			return new Element(0, expr);
		}

		int depth = 0;
		int index = 0;
		while (true) {
			char ch = expr.charAt(index);

			if (ch == '(') {
				++depth;
			} else if (ch == ')') {
				--depth;

				if (depth == 0 && index == expr.length() - 1) {
					return format(expr.substring(1, expr.length() - 1));
				}
			} else if (depth == 0 && !Character.isLetter(ch)) {
				break;
			}

			++index;
		}

		char operator = expr.charAt(index);
		int precedence = operatorToPrecedence.get(operator);

		Element leftResult = format(expr.substring(0, index));
		Element rightResult = format(expr.substring(index + 1));

		String formatted = String.format("%s%c%s",
				(leftResult.precedence > precedence || (leftResult.precedence == precedence && operator == '^'))
						? parenthesize(leftResult.formatted)
						: leftResult.formatted,
				operator,
				(rightResult.precedence > precedence
						|| (rightResult.precedence == precedence && (operator == '/' || operator == '-')))
								? parenthesize(rightResult.formatted)
								: rightResult.formatted);

		return new Element(precedence, formatted);
	}

	String parenthesize(String expr) {
		return String.format("(%s)", expr);
	}

	class Element {
		int precedence;
		String formatted;

		Element(int precedence, String formatted) {
			this.precedence = precedence;
			this.formatted = formatted;
		}
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		ParenReduction obj;
		String answer;
		obj = new ParenReduction();
		long startTime = System.currentTimeMillis();
		answer = obj.pretty(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		String p0;
		String p1;

		// ----- test 0 -----
		p0 = "(a-(b/(c^d)))";
		p1 = "a-b/c^d";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = "(e*((f+(g+h))*i))";
		p1 = "e*(f+g+h)*i";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = "(((a-(b-c))-d)^((e/f)/(g/h)))";
		p1 = "(a-(b-c)-d)^(e/f/(g/h))";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = "x";
		p1 = "x";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = "((a+((l-g)+o))^((r/i)*((t/h)*m)))";
		p1 = "(a+l-g+o)^(r/i*t/h*m)";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------

		// ----- test 5 -----
		p0 = "(((((t-(k/(o*m)))*(c*f))*((n/j)+(v-z)))^l)/(x-h))";
		p1 = "((t-k/(o*m))*c*f*(n/j+v-z))^l/(x-h)";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------

		// ----- test 6 -----
		p0 = "((q^r)^(f^g))";
		p1 = "(q^r)^f^g";
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
