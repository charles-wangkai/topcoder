import java.util.stream.IntStream;

public class QueenInterference {
	int a;

	public int numSteps(int n) {
		a = 1;

		int[] queens = new int[n];
		for (int i = 0; i < queens.length; ++i) {
			queens[i] = nextRandom(n);
		}

		int result = 0;
		while (true) {
			int[] reachableIndices = IntStream.range(0, n)
					.filter(i -> IntStream.range(0, n).anyMatch(j -> j != i && isReachable(i, queens[i], j, queens[j])))
					.toArray();

			int T = reachableIndices.length;
			if (T == 0) {
				break;
			}

			int K = nextRandom(T);
			int reachableIndex = reachableIndices[K - 1];

			int[] reachableCounts = new int[n + 1];
			for (int r = 1; r <= n; ++r) {
				for (int i = 0; i < n; ++i) {
					if (i != reachableIndex && isReachable(reachableIndex, r, i, queens[i])) {
						++reachableCounts[r];
					}
				}
			}

			int minReachableCount = IntStream.rangeClosed(1, n).map(r -> reachableCounts[r]).min().getAsInt();

			int[] rowsWithMinReachableCount = IntStream.rangeClosed(1, n)
					.filter(r -> reachableCounts[r] == minReachableCount).toArray();
			int P = rowsWithMinReachableCount.length;
			if (P == 1) {
				queens[reachableIndex] = rowsWithMinReachableCount[0];
			} else {
				int Q = nextRandom(P);

				queens[reachableIndex] = rowsWithMinReachableCount[Q - 1];
			}

			++result;
		}

		return result;
	}

	boolean isReachable(int c1, int r1, int c2, int r2) {
		return r1 == r2 || r1 + c1 == r2 + c2 || r1 - c1 == r2 - c2;
	}

	int nextRandom(int up) {
		int result = a % up + 1;
		a = (int) (16807L * a % 2147483647);

		return result;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		QueenInterference obj;
		int answer;
		obj = new QueenInterference();
		long startTime = System.currentTimeMillis();
		answer = obj.numSteps(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int p0;
		int p1;

		// ----- test 0 -----
		p0 = 5;
		p1 = 4;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = 7;
		p1 = 6;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = 19;
		p1 = 475;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = 100;
		all_right = KawigiEdit_RunTest(3, p0, false, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
