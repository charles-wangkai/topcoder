public class BigCube {
	static final int LIMIT = 100000;

	public String largestCube(String[] range) {
		for (int i = LIMIT; i >= 0; --i) {
			long n = (long) i * i * i;

			for (String r : range) {
				String[] parts = r.split("-");
				long low = Long.parseLong(parts[0]);
				long high = Long.parseLong(parts[1]);

				if (n >= low && n <= high) {
					return String.valueOf(n);
				}
			}
		}

		return "";
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		BigCube obj;
		String answer;
		obj = new BigCube();
		long startTime = System.currentTimeMillis();
		answer = obj.largestCube(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		String[] p0;
		String p1;

		// ----- test 0 -----
		p0 = new String[] { "1-1000000000001" };
		p1 = "1000000000000";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new String[] { "10-999999999999990", "11-999999999999991", "12-999999999999992", "13-999999999999993",
				"14-999999999999994", "15-999999999999995", "16-999999999999996", "17-999999999999993",
				"18-999999999999994", "19-999999999999999" };
		p1 = "999970000299999";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new String[] { "0-3", "10-20", "30-60", "80-120" };
		p1 = "1";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new String[] { "999700030000-999999999999", "999400119993-999700029998", "999100269974-999400119991",
				"998800479937-999100269972" };
		p1 = "";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = new String[] { "0-0", "2-2", "3-3", "4-4", "5-5", "6-6", "7-7", "9-9", "10-10", "12-12", "14-14", "16-16",
				"18-18", "20-20", "22-22", "24-24", "26-26", "28-28", "30-30", "32-32", "34-34", "36-36", "38-38",
				"40-40", "42-42", "44-44", "46-46", "48-48", "50-50", "52-52", "54-54", "56-56", "58-58", "60-60",
				"62-62", "65-65", "67-67", "69-69", "71-71", "73-73", "75-75", "77-77", "79-79", "81-81", "83-83",
				"85-85", "87-87", "89-89", "99-99", "999970000300000-999999999999999" };
		p1 = "0";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
